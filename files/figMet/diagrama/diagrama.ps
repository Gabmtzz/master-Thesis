%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: diagrama.dvi
%%CreationDate: Fri Aug  6 15:29:51 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 512 322
%%DocumentFonts: CMR10 CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips diagrama.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.06:1029
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-intersect.pro 0 0
%%
%% This is file `pst-intersect.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-intersect.dtx  (with options: `prolog')
%% 
%% This is a generated file.
%% 
%% Project: pst-intersect
%% Version: 0.4 (2014/03/16)
%% 
%% Copyright (C) 2007-2014 by Christoph Bersch <usenet@bersch.net>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%% 
%% This work has the LPPL maintenance status "maintained".
%% 
%% The current maintainer of this work is Christoph Bersch.
%% 
%% This work consists of the files pst-intersect.dtx and pst-intersect.ins
%% and the derived files
%%     pst-intersect.sty, pst-intersect.tex, pst-intersect.pro.
%% 
/tx@IntersectDict 200 dict def
tx@IntersectDict begin
/VecAdd {
    3 -1 roll add 3 1 roll add exch
} bind def
/VecSub {
    neg 3 -1 roll add 3 1 roll neg add exch
} bind def
/VecScale {
  dup 4 -1 roll mul 3 1 roll mul
} bind def
/ToPnt {
    [ 3 1 roll ]
} bind def
/MaxPrecision 1e-6 def
/Epsilon 1e-4 def
/MinClippedSizeThreshold 0.8 def
/H1Interval [0 0.5] def
/H2Interval [0.5 MaxPrecision add 1] def
/IntersectBeziers {
  2 copy length 2 eq exch length 2 eq and {
    IntersectLineSegms
  }{
    2 copy [0 1] [0 1] IterateIntersection
  } ifelse
  3 -1 roll exch
} bind def
/IntersectLines {
  (IntersectLines) DebugBegin
  2 copy
  exch { aload pop } forall 5 -1 roll { aload pop } forall
  8 -2 roll 2 copy 10 4 roll 4 2 roll 2 copy 6 2 roll 10 2 roll
  VecSub
  6 2 roll 4 2 roll VecSub
  8 4 roll 4 2 roll VecSub
  6 copy 12 -4 roll
  neg 4 -1 roll mul 3 1 roll mul add
  dup 0 eq {
    9 { pop } repeat [] []
  } {
    dup 10 1 roll 5 1 roll
     4 -1 roll mul 3 1 roll mul sub exch div
     6 1 roll 4 -1 roll mul 3 1 roll mul sub exch div
     [ exch ] exch [ exch ]
   } ifelse
  DebugEnd
} bind def
/IntersectLineSegms {
  IntersectLines
  dup length 0 eq not {
    0 get exch 0 get
    2 copy 2 copy 0 ge exch 0 ge and 3 1 roll 1 le exch 1 le and and {
      [ exch ] exch [ exch ]
    } {
      pop pop [] []
    } ifelse
  } if
} bind def
/IntersectLineLineSegm {
  tx@IntersectDict begin IntersectLines end
  dup length 0 eq not {
    0 get dup dup 0 ge exch 1 le and {
      [ exch ]
    } {
      pop pop [] []
    } ifelse
  } if
  3 -1 roll exch
} bind def
/IntersectLinePath {
  (IntersectLinePath) DebugBegin
  3 dict begin
    PreparePath
    2 copy ElongateLine exch 3 -1 roll pop
    /isect [] def
    /t -1 def
    /n -1 def
    {
      /n n 1 add def
      2 copy IntersectBeziers
      dup 5 1 roll LoadIntersectionPoints
      dup length 0 gt {
        /isect exch def
        0 get aload pop add 0.5 mul n add /t exch def
        exch pop
        exit
      } {
        pop pop pop
      } ifelse
    } forall
    t isect
  end
  DebugEnd
} bind def
/ElongateLine {
  exch { aload pop } forall
  4 2 roll 2 copy 6 2 roll
  VecSub 0 5 1 roll
  6 -1 roll {
    {
      aload pop
      6 2 roll 4 copy 10 4 roll
      6 2 roll VecSub 4 2 roll
      tx@EcldDict begin Project end
      tx@Dict begin Pyth end
      6 -1 roll 2 copy
      gt { pop } { exch pop } ifelse
      5 1 roll
    } forall
  } forall
  % for a line
  5 -1 roll VecScale 4 copy VecSub ToPnt 5 1 roll VecAdd ToPnt ToPnt
  % for a ray
  %4 2 roll 2 copy ToPnt 6 1 roll 4 2 roll 5 -1 roll 1.1 mul VecScale VecAdd ToPnt ToPnt
} bind def
/IntersectPaths {
  (IntersectPaths) DebugBegin
  6 dict begin
    2 copy exch PreparePath dup length /nA exch def
    exch PreparePath dup length /nB exch def
    /isect [] def
    /tA [] def /tB [] def
    { % [pathA] [Bi]
      /nB nB 1 sub def
      exch dup 3 1 roll % [pathA] [Bi] [pathA]
      {
        /nA nA 1 sub def
        exch dup 3 1 roll % [pathA] [Bi] [Aj] [Bi]
        IntersectBeziers % [curveA] [tA] [curveB] [tB]
        4 copy LoadIntersectionPoints
        [ exch isect aload pop ] /isect exch def
        exch pop 3 -1 roll pop
        [ tB aload length 2 add -1 roll TArray { nB add } forall ] /tB exch def
        [ tA aload length 2 add -1 roll TArray { nA add } forall ] /tA exch def
      } forall
      pop % remove [Bi]
      dup length /nA exch def
    } forall
    pop % remove [pathA]
    [ isect { aload pop } forall ] 3 1 roll tA exch tB
  end
  DebugEnd
} bind def
/IntersectCurvePath {
  (IntersectCurvePath) DebugBegin
  6 dict begin
    2 copy PreparePath dup length /n exch def
    /isect [] def
    /tA [] def /tB [] def
    {
      /n n 1 sub def
      exch dup 3 -1 roll
      IntersectBeziers
      4 copy LoadIntersectionPoints
      [ exch isect aload pop ] /isect exch def
      pop 3 -1 roll pop
      [ tB aload length 2 add -1 roll TArray { n add } forall ] /tB exch def
      [ tA aload length 2 add -1 roll TArray aload pop ] /tA exch def
    } forall
    pop
    [ isect { aload pop } forall ] 3 1 roll tA exch tB
  end
  DebugEnd
} bind def
/IntersectPathCurve {
  exch IntersectCurvePath 4 2 roll
} bind def
/MergeAndSortArrays {
  [ 3 1 roll aload pop counttomark -1 roll aload pop ]
  dup length 0 gt {
    dup dup 0 get type /arraytype eq {
      hulldict /comp get
    } {
      /lt
    } ifelse
    exch quicksort
  } if
} bind def
/SaveIntersection {
  (SaveIntersection) DebugBegin
  exch dup 3 1 roll % isectname add? isectname
  currentdict exch known and {
    load begin % pnts A tA B tB /A /B
      dup currentdict exch known { % /nameB already saved.
        4 -1 roll pop % pnts A tA tB /A /B
        nametostr (@t) strcat cvn dup load 4 -1 roll
        MergeAndSortArrays def
      } {
        dup 5 -1 roll def % pnts A tA B tB /A /B
        nametostr (@t) strcat cvn 3 -1 roll TArray def
      } ifelse % pnts A tA /A
      dup currentdict exch known { % /nameB already saved.
        3 -1 roll pop
        nametostr (@t) strcat cvn dup load 3 -1 roll
        MergeAndSortArrays def
      } {
        dup 4 -1 roll def
        nametostr (@t) strcat cvn exch TArray def
      } ifelse
      /Points exch ArrayToPointArray Points ArrayToPointArray
      MergeAndSortArrays PointArrayToArray def
    end
  } {
    4 dict dup 3 1 roll def
    begin
      dup 5 -1 roll def
      nametostr (@t) strcat cvn 3 -1 roll TArray def
      dup 4 -1 roll def
      nametostr (@t) strcat cvn exch TArray def
      /Points exch def
    end
  } ifelse
  DebugEnd
} bind def
/TArray {
  dup length 0 gt {
    dup 0 get type /arraytype eq {
      [ exch
      { %dup type /nulltype eq { pop exit } if
   aload pop add 0.5 mul
      } forall ]
    } if
    dup /lt exch quicksort
  } if
} bind def
/InitTracing {
  /movetype /moveto load def
  /linetype /lineto load def
  /curvetype /curveto load def
} bind def
/GetFullPath {
  (GetFullPath) DebugBegin
  { /movetype counttomark 3 roll }
  { /linetype counttomark 3 roll }
  { /curvetype counttomark 7 roll }{} pathforall
  DebugEnd
} bind def
/ReversePath {
  gsave newpath
    [ exch aload pop InitTracing
    { counttomark 0 eq { exit } if
      load exec
    } loop
    reversepath
    GetFullPath ]
  grestore
} bind def
/ReverseCurve {
  PointArrayToArray aload pop % [ tstart tstop [ X0 Y0 X1 Y1...
  counttomark -2 4 { 2 roll } for ] ArrayToPointArray
} bind def
/ReverseInterval {
  3 -1 roll dup 4 1 roll GetSegmentCount
  dup 4 1 roll exch sub 3 1 roll sub exch
} bind def
/UnifyInterval {
  exch dup 0 lt { pop 0 } if exch
  3 -1 roll dup 4 1 roll GetSegmentCount
  2 copy exch dup 3 1 roll % [curve] tstart tstop cnt tstop cnt tstop
  lt exch 0 lt or { exch } if pop % (tstop < 0 | cnt < tstop)
} bind def
/PreparePath {
  (PreparePath) DebugBegin
  [ exch aload pop
  {
    dup type /nametype eq not { exit } if
    dup /movetype eq {
      pop ToPnt /@mycp exch def
    } {
      dup /linetype eq {
        pop [ @mycp 4 2 roll 2 copy ToPnt /@mycp exch def ToPnt ]
      } {
        pop [ @mycp 8 2 roll 2 copy ToPnt /@mycp exch def
        ToPnt 5 1 roll ToPnt 4 1 roll ToPnt 3 1 roll ]
      } ifelse
      counttomark 1 roll
    } ifelse
  } loop ]
  DebugEnd
} bind def
/GetSegmentCount {
  (GetSegmentCount) DebugBegin
  dup IsPath {
    [ exch aload pop 0
    {
      counttomark 1 eq { exit } if
      exch
      dup /movetype eq {
        pop 3 1 roll pop pop
      }{
        dup /linetype eq {
          pop 1 add 3 1 roll pop pop
        }{
          pop 1 add 7 1 roll 6 { pop } repeat
        } ifelse
      } ifelse
    } loop
    exch pop
  } {
    % a Bezier curve is a single segment
    length 0 gt { 1 } { 0 } ifelse
  } ifelse
  DebugEnd
} bind def
/LoadLineIntersectionPoints {
  (LoadLineIntersectionPoints) DebugBegin
  exch [ exch { aload pop } forall ]
  tx@Dict begin tx@FuncDict begin 2 dict begin
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
    [ exch { GetBezierCoor } forall ]
  end end end
  DebugEnd
} bind def
/LoadCurveIntersectionPoints {
  (LoadCurveIntersectionPoints) DebugBegin
  2 {
    4 2 roll
    [ exch { aload pop } forall ]
    exch [ exch { aload pop } forall ]
  } repeat
  tx@Dict begin tx@FuncDict begin 2 dict begin
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
      [ exch { GetBezierCoor } forall ]
    3 1 roll
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
      [ exch { GetBezierCoor } forall ]
    end
    2 {
      [ exch aload length 4 idiv {
        [ 5 1 roll ] counttomark 1 roll
      } repeat ]
      exch
    } repeat
    2 {
      dup hulldict /comp get exch quicksort exch
    } repeat
    2 dict begin
      /B exch def /A exch def
      [ 0 1 A length 1 sub {
        dup A exch get exch B exch get % [IAi] [IBi]
        2 copy aload pop VecSub Pyth exch
        aload pop VecSub Pyth lt { exch } if pop
        aload pop VecAdd 0.5 VecScale
      } for ]
    end
  end end
  DebugEnd
} bind def
/LoadIntersectionPoints {
  (LoadIntersectionPoints) DebugBegin
  4 copy pop exch pop length 2 eq exch length 2 eq and {
    pop pop LoadLineIntersectionPoints
  }{
    LoadCurveIntersectionPoints
  } ifelse
  DebugEnd
} bind def
/IterateIntersection {
    (IterateIntersection) DebugBegin
    12 dict begin
/precision MaxPrecision def
        4 2 roll 2 copy 6 2 roll
        dup IsPath not { PointArrayToArray } if
        0 exch { dup type /nametype eq { pop }{ abs max} ifelse } forall
        exch dup IsPath not { PointArrayToArray } if
        { dup type /nametype eq { pop }{ abs max} ifelse } forall
        Epsilon mul /epsilon exch def
        /counter 0 def
/depth 0 def
/domsA [] def
/domsB [] def
/domsA /domsB 6 2 roll _IterateIntersection
domsB domsA
    end
    dup length 0 gt {
      TArraysRemoveDup
    } if
    DebugEnd
} bind def
/TArraysRemoveDup {
  4 dict begin
    /tB exch def
    /tA exch def
    /j 0 def
    [ tA 0 get tB 0 get
    1 1 tA length 1 sub {
      /i exch def
      tA j get aload pop tA i get aload pop tx@Dict begin Pyth2 end MaxPrecision gt
      tB j get aload pop tB i get aload pop tx@Dict begin Pyth2 end MaxPrecision gt and {
        % keep the current parameter point
        /j i def
        tB i get tA i get
        counttomark 2 idiv 1 add 1 roll
      } if
    } for
    counttomark 2 idiv 1 add [ exch 1 roll ] % [ ... [tB]
    counttomark 1 add 1 roll ] exch % [tA] [tB]
  end
} bind def
/_IterateIntersection {
    (_IterateIntersection) DebugBegin
    CloneVec /domB exch def
    CloneVec /domA exch def
    CloneCurve /CurveB exch def
    CloneCurve /CurveA exch def
    /iter 0 def
    /depth depth 1 add def
    /dom null def
    /counter counter 1 add def
    CheckIT {
(>> curve subdivision performed: dom(A) = ) domA CurveToString strcat
(, dom(B) = ) strcat domB CurveToString strcat ( <<) strcat ==
    } if
    CurveA IsConstant CurveB IsConstant and {
CurveA MiddlePoint ToPnt
CurveB MiddlePoint ToPnt AreNear {
    domA domB 4 -1 roll exch PutInterval PutInterval
} {
    pop pop
} ifelse
    }{
counter 100 lt {
    {
/iter iter 1 add def
iter 100 lt
domA Extent precision ge
domB Extent precision ge or and not {
    iter 100 ge {
false
    } {
CurveA MiddlePoint ToPnt
CurveB MiddlePoint ToPnt AreNear {
    domA domB true
}{
    false
} ifelse
    } ifelse
    exit
} if
CheckIT {
    (counter: ) counter 20 string cvs strcat
    (, iter: ) iter 20 string cvs strcat strcat
    (, depth: ) depth 20 string cvs strcat strcat ==
} if
CurveA CurveB ClipCurve /dom exch def

CheckIT {(dom : ) dom CurveToString strcat == } if
dom IsEmptyInterval {
    CheckIT { (empty interval, exit) == } if
    false exit
} if
dom aload pop 2 copy min 3 1 roll max gt {
    CheckIT {
(dom[0] > dom[1], invalid!) ==
    } if
    false exit
} if

domB dom MapTo /domB exch def
CurveB dom Portion

CurveB IsConstant CurveA IsConstant and {
    CheckIT {
           (both curves are constant: ) ==
(C1: [ ) CurveA { CurveToString ( ) strcat strcat } forall (]) strcat ==
(C2: [ ) CurveB { CurveToString ( ) strcat strcat } forall (]) strcat ==
    } if
    CurveA MiddlePoint ToPnt
    CurveB MiddlePoint ToPnt AreNear {
domA domB true
    } {
false
    } ifelse
    exit
} if
dom Extent MinClippedSizeThreshold gt {
    CheckIT {
(clipped less than 20% : ) ==
(angle(A) = ) CurveA dup length 1 sub get aload pop
      CurveA 0 get aload pop VecSub
          exch 2 copy 0 eq exch 0 eq and {
  pop pop (NaN)
      } {
  atan 20 string cvs
      } ifelse strcat ==
        (angle(B) = ) CurveB dup length 1 sub get aload pop
                      CurveB 0 get aload pop VecSub
      exch 2 copy 0 eq exch 0 eq and {
  pop pop (NaN)
      } {
  atan 20 string cvs
      } ifelse strcat ==
        (dom : ) == dom == (domB :) == domB ==
    } if
    CurveA CurveB domA domB iter
          7 -2 roll 2 copy 9 2 roll 2 copy
    domA Extent domB Extent gt {
CurveA CloneCurve dup H1Interval Portion % pC1
CurveA CloneCurve dup H2Interval Portion % pC2
domA H1Interval MapTo                    % dompC1
domA H2Interval MapTo                    % dompC2
3 -1 roll exch % /domsA /domsB /domsA /domsB pC1 dompC1 pC2 dompC2
CurveB exch domB 8 4 roll % /domsA /domsB pC2 CurveB dompC2 domB /domsA /domsB pC1 dompC1
CurveB exch domB % /domsA /domsB pC2 CurveB dompC2 domB /domsA /domsB pC1 CurveB dompC1 domB
    } {
CurveB CloneCurve dup H1Interval Portion % pC1
CurveB CloneCurve dup H2Interval Portion % pC2
domB H1Interval MapTo                    % dompC1
domB H2Interval MapTo                    % dompC2
8 -2 roll exch 8 2 roll 6 -2 roll exch 6 2 roll % /domsB /domsA /domsB /domsA pC1 pC2 dompC1 dompC2
3 -1 roll exch % /domsB /domsA /domsB /domsA pC1 dompC1 pC2 dompC2
CurveA exch domA 8 4 roll % /domsB /domsA pC2 CurveA dompC2 domA /domsB /domsA pC1 dompC1
CurveA exch domA          % /domsB /domsA pC2 CurveA dompC2 domA /domsB /domsA pC1 CurveA dompC1 domA
    } ifelse

    _IterateIntersection
    _IterateIntersection
    /iter exch def
    /domB exch def
    /domA exch def
    /CurveB exch def
    /CurveA exch def
    false exit
} if
CurveA CurveB /CurveA exch def /CurveB exch def
domA domB /domA exch def /domB exch def
exch
    } loop
    {
4 -1 roll exch PutInterval PutInterval
CheckIT {
    (found an intersection ============================) ==
} if
    } { pop pop } ifelse
} {
    pop pop
} ifelse
    } ifelse
    /depth depth 1 sub def
    DebugEnd
} bind def
/PutInterval {
    CloneVec [ exch 3 -1 roll dup 4 1 roll load aload pop ] def
} bind def
/IsEmptyInterval {
    aload pop 0 eq exch 1 eq and
} bind def
/ToUnitInterval {
    ToUnitRange exch ToUnitRange 2 copy gt {
exch
    } if
    ToPnt
} bind def
/ToUnitRange {
    dup 0 lt {
pop 0
    }{
dup 1 gt {
    pop 1
} if
    } ifelse
} bind def
/CloneCurve {
    [ exch {
CloneVec
    } forall ]
} bind def
/CloneVec {
    aload pop ToPnt
} bind def
/MapTo {
    (MapTo) DebugBegin
    exch aload 0 get 3 1 roll exch sub 2 copy % [I] J0 Jextent J0 Jextent
    5 -1 roll aload aload pop % J0 Jextent J0 Jextent I0 I1 I0 I1
    min 4 -1 roll mul % J0 Jextent J0 I0 I1 min(I0,I1)*Jextent
    4 -1 roll add [ exch % J0 Jextent I0 I1 [ J0new
    6 2 roll max mul add ]
    DebugEnd
} bind def
/Portion {
    (Portion) DebugBegin
    dup Min 0 eq { % [CurveB] [I]
Max dup 1 eq {% [CurveB] I.max()
    % I.max() == 1
    pop pop
} { % [CurveB] I.max()
    LeftPortion
} ifelse
    } { % [CurveB] [I]
2 copy Min % [CurveB] [I] [CurveB] I.min()
RightPortion
dup Max 1 eq {
    % I.max() == 1
    pop pop
} {% [CurveB] [I]
    dup aload pop exch sub 1 3 -1 roll Min sub div % [CurveB] (I1-I0)/(1-I.min())
    LeftPortion
} ifelse
    } ifelse
    DebugEnd
} bind def
/LeftPortion {
    (LeftPortion) DebugBegin
    exch dup length 1 sub dup 4 1 roll % L-1 t [CurveB] L-1
    1 1 3 -1 roll { % L-1 t [CurveB] i
4 -1 roll dup 5 1 roll % L-1 t [CurveB] i L-1
-1 3 -1 roll % L-1 t [CurveB] L-1 -1 i
{ % L-1 t [CurveB] j
    2 copy 5 copy % L-1 t [CurveB] j [CurveB] j t [CurveB] j [CurveB] j
    1 sub get 3 1 roll get % L-1 t [CurveB] j [CurveB] j t B[j-1] B[j]
    Lerp put pop % L-1 t [CurveB]
} for
    } for
    pop pop pop
    DebugEnd
} bind def
/RightPortion {
    (RightPortion) DebugBegin
    exch dup length 1 sub dup 4 1 roll % L-1 t [CurveB] L-1
    1 1 3 -1 roll {% L-1 t [CurveB] i
4 -1 roll dup 5 1 roll % L-1 t [CurveB] i L-1
exch sub 0 1 3 -1 roll  % L-1 t [CurveB] 0 1 L-i-1
{% L-1 t [CurveB] j
    2 copy 5 copy
    get 3 1 roll 1 add get Lerp put pop
} for
    } for
    pop pop pop
    DebugEnd
} bind def
/Lerp {
    (Lerp) DebugBegin
    3 -1 roll dup 1 exch sub 3 1 roll % [A] (1-t) [B] t
    exch aload pop 3 -1 roll VecScale % [A] (1-t) B.x*t B.y*t
    4 2 roll
    exch aload pop 3 -1 roll VecScale VecAdd ToPnt % [A.x*(1-t)+B.x*t A.y*(1-t)+B.y*t]
    DebugEnd
} bind def
/IsConstant {
    aload length [ exch 1 roll ] true 3 1 roll
    {
exch dup 4 1 roll
AreNear and exch
    } forall
    pop
} bind def
/AreNear {
    (AreNear) DebugBegin
    aload pop 3 -1 roll aload pop
    VecSub abs epsilon lt exch abs epsilon lt and
    DebugEnd
} bind def
/Min {
    aload pop min
} bind def
/Max {
    aload pop max
} bind def
/Extent {
    aload pop exch sub
} bind def
/MiddlePoint {
    dup dup length 1 sub get aload pop
    3 -1 roll 0 get aload pop
    VecAdd 0.5 VecScale
} bind def
/OrthogonalOrientationLine {
    (OrthogonalOrientationLine) DebugBegin
    dup dup length 1 sub get aload pop 3 -1 roll 0 get aload pop VecSub
    neg exch
    4 2 roll 2 copy 6 2 roll VecAdd
    ImplicitLine
    DebugEnd
} bind def
/PickOrientationLine {
    (PickOrientationLine) DebugBegin
    dup dup length 1 sub exch 0 get% [Curve] L-1 P0
    exch -1 1 {% [Curve] P0 i
3 -1 roll dup 4 1 roll exch get % [Curve] P0 Pi
2 copy AreNear {
    pop
} {
    exit
} ifelse
    } for
    3 -1 roll pop
    exch aload pop 3 -1 roll aload pop ImplicitLine
    DebugEnd
} bind def
/ImplicitLine {
    4 copy % Xi Yi Xj Yj Xi Yi Xj Yj
    3 -1 roll sub 7 1 roll sub 5 1 roll % Yj-Yi Xi-Xj Xi Yi Xj Yj
    % Yi*Xj - Xi*Yj
    4 -1 roll mul neg % Yj-Yi Xi-Xj Yi Xj -Yj*Xi
    3 1 roll mul add % Yj-Yi Xi-Xj Yi*Xj-Yj*Xi | l0 l1 l2
    3 1 roll 2 copy tx@Dict begin Pyth end dup dup % l2 l0 l1 L L L
    5 -1 roll exch % l2 l1 L L l0 L
    div 5 1 roll % l0/L l2 l1 L L
    3 1 roll div % l0/L l2 L l1/L
    3 1 roll div % l0/L l1/L l2/L
} bind def
/distance {
    5 1 roll 3 -1 roll mul 3 1 roll mul add add
} bind def
/ArrayToPointArray {
    aload length dup 2 idiv {
3 1 roll [ 3 1 roll ] exch
dup 1 sub 3 1 roll 1 roll
    } repeat 1 add [ exch 1 roll ]
} bind def
/PointArrayToArray {
    aload length dup {
1 add dup 3 -1 roll aload pop 4 -1 roll 1 add 2 roll
    } repeat 1 add [ exch 1 roll ]
} bind def
/ClipCurve {
    (ClipCurve) DebugBegin
    4 dict begin
    /CurveB exch def /CurveA exch def
    CurveA IsConstant {
     CurveA MiddlePoint CurveB OrthogonalOrientationLine
    } {
CurveA PickOrientationLine
    } ifelse
    CheckIT {
3 copy exch 3 -1 roll (OrientationLine : )
3 { exch 20 string cvs ( ) strcat strcat } repeat ==
    } if
    CurveA FatLineBounds
    CheckIT { dup (FatLineBounds : ) exch aload pop exch 20 string cvs (, ) strcat exch 20 string cvs strcat strcat == } if
    CurveB ClipCurveInterval
    end
    DebugEnd
} bind def
/FatLineBounds {
    (FatLineBounds) DebugBegin
    /dmin 0 def /dmax 0 def
    {
4 copy aload pop 5 2 roll distance
dup dmin lt { dup /dmin exch def } if
dup dmax gt { dup /dmax exch def } if
pop pop
    } forall
    [dmin dmax]
    DebugEnd
} bind def
/ClipCurveInterval {
    (ClipCurveInterval) DebugBegin
    15 dict begin
    /curve exch def
    aload pop 2 copy min /boundMin exch def max /boundMax exch def
    [ 4 1 roll ] cvx /fatline exch def
    % number of sub-intervals
    /n curve length 1 sub def
    % distance curve control points
    /D n 1 add array def
    0 1 n { % i
dup curve exch get aload pop % i Pi.x Pi.y
fatline distance % distance d of Point i from the orientation line, on stack; i d
exch dup n div % d i i/n
[ exch 4 -1 roll ] % i [ i/n d ]
D 3 1 roll put
    } for
    D ConvexHull /D exch def
    /getX { D exch get 0 get } def
    /getY { D exch get 1 get } def
    /tmin 1 def /tmax 0 def
    0 getY dup
    boundMin lt /plower exch def
    boundMax gt /phigher exch def
    plower phigher or not {
tmin 0 getX gt { /tmin 0 getX def } if
tmax 0 getX lt { /tmax 0 getX def } if
    } if
    1 1 D length 1 sub {
/i exch def
/clower i getY boundMin lt def
/chigher i getY boundMax gt def
clower chigher or not {
    tmin i getX gt { /tmin i getX def } if
    tmax i getX lt { /tmax i getX def } if
} if
clower plower eq not {
    boundMin i 1 sub i D Intersect % t on stack
    dup tmin lt { dup /tmin exch def } if
    dup tmax gt { dup /tmax exch def } if
    pop
    /plower clower def
} if
chigher phigher eq not {
    boundMax i 1 sub i D Intersect
    dup tmin lt { dup /tmin exch def } if
    dup tmax gt { dup /tmax exch def } if
    pop
    /phigher chigher def
} if
    } for
    /i D length 1 sub def
    /clower 0 getY boundMin lt def
    /chigher 0 getY boundMax gt def
    clower plower eq not {
boundMin i 0 D Intersect
dup tmin lt { dup /tmin exch def } if
dup tmax gt { dup /tmax exch def } if
pop
    } if
    chigher phigher eq not {
boundMax i 0 D Intersect
dup tmin lt { dup /tmin exch def } if
dup tmax gt { dup /tmax exch def } if
pop
    } if
    [tmin tmax]
    end
    DebugEnd
} bind def
/Intersect {
    dup 4 -1 roll get aload pop
    4 2 roll exch get aload pop
    4 2 roll 2 copy 6 2 roll VecSub
    5 2 roll
    neg 3 -1 roll add
    3 -1 roll div
    3 -1 roll mul add
} bind def
/IsPath {
  dup length 1 sub get type /nametype eq { true } { false } ifelse
} bind def
/ShowPathPortion {
  (ShowPathPortion) DebugBegin
  8 dict begin
  /tstop exch def
  /tstart exch def
  /savecp { ToPnt cvx /@cp exch def } def
  InitTracing
  /n 0 def
  mark exch aload pop
  {
    counttomark 0 eq n tstop ge or { cleartomark exit } if
    dup /movetype eq not { /n n 1 add def } if
    dup /movetype eq {
      pop savecp
    } {
      tstart n ge {
        /curvetype eq { 6 2 roll 4 { pop } repeat } if
        savecp
      } {
        tstart n 1 sub gt tstop n lt or {
          tstart n sub 1 add tstop n sub 1 add
          ToUnitInterval exch
          /linetype eq {
            3 1 roll ToPnt
            tstart n 1 sub gt { @cp ToPnt } { currentpoint ToPnt } ifelse exch ToPnt
            dup 3 -1 roll Portion
            aload pop exch
            tstart n 1 sub gt {
              exch aload pop 3 -1 roll aload pop ArrowA
              tstop n le {
                currentpoint 4 2 roll ArrowB linetype pop pop
              } {
                linetype
              } ifelse
            } {
              pop aload pop currentpoint 4 2 roll ArrowB linetype pop pop
            } ifelse
          } {
            7 1 roll
            [ tstart n 1 sub gt { @cp }{ currentpoint } ifelse
            9 3 roll ] ArrayToPointArray
            dup 3 -1 roll
            Portion
            { aload pop } forall
            tstart n 1 sub gt {
              8 -4 roll 4 2 roll ArrowA 6 2 roll
            } {
              8 -2 roll pop pop
            } ifelse
            tstop n le { ArrowB } if
            curvetype
          } ifelse
        }{
          tstart n 1 sub eq {
            /linetype eq {
              @cp ArrowA
              tstop n eq {
                currentpoint 4 2 roll ArrowB linetype pop pop
              } {
                linetype
              } ifelse
            } {
              6 -2 roll @cp ArrowA 6 2 roll
              tstop n eq {
                ArrowB
              } if
              curvetype
            } ifelse
          } {
            /linetype eq {
              tstop n eq {
                currentpoint 4 2 roll ArrowB linetype pop pop
              }{
                linetype
              } ifelse
            } {
              tstop n eq {
                ArrowB
              } if
              curvetype
            } ifelse
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } loop
  end
  DebugEnd
} bind def
/GetCurvePoint {
  dup IsPath {
    5 dict begin
    exch dup /tstart exch def
    1 add cvi /tstop exch def
    /savecp { ToPnt cvx /@cp exch def } def
    /n 0 def
    mark exch aload pop
    {
      counttomark 0 eq n tstop ge or { cleartomark exit } if
      dup /movetype eq not { /n n 1 add def } if
      dup /movetype eq {
        pop savecp
      } {
        tstart n ge {
          /curvetype eq { 6 2 roll 4 { pop } repeat } if
          savecp
        } {
          tstart n 1 sub gt {
            tstart n sub 1 add tstop n sub 1 add
            ToUnitInterval exch
            /linetype eq {
              3 1 roll ToPnt
              tstart n 1 sub gt { @cp ToPnt } { currentpoint ToPnt } ifelse exch ToPnt
              dup 3 -1 roll Portion
            } {
              7 1 roll
              [ @cp 9 3 roll ] ArrayToPointArray
              dup 3 -1 roll
              Portion
            } ifelse
            0 get aload pop
          }{
            /curvetype eq {
              pop pop pop pop
            } if
          } ifelse
          counttomark 1 add 2 roll cleartomark exit
        } ifelse
      } ifelse
    } loop
    end
  } {
    exch dup 0 eq {
      pop 0 get aload pop
    } {
      0 exch ToUnitInterval exch dup 3 -1 roll Portion
      dup length 1 sub get aload pop
    } ifelse
  } ifelse
} bind def
/TraceCurveOrPath {
  4 1 roll
  UnifyInterval
  3 -1 roll dup IsPath {
    4 -1 roll pop
    3 1 roll 2 copy gt {
      ReverseInterval
      3 -1 roll ReversePath 3 1 roll
    } if
    ShowPathPortion
  }{ % tstart tstop [curve]
    mark exch 4 2 roll % [ [curve] tstart tstop
      2 copy gt { % tstart > tstop
        exch
        [ 4 -1 roll ReverseCurve 3 1 roll % [ [curve'] tstart tstop
      } if
      ToUnitInterval exch dup 3 -1 roll Portion
      { aload pop } forall
      counttomark -2 4 { 2 roll } for
      counttomark 2 sub 2 idiv
      counttomark 2 add -1 roll exec
    } ifelse
} bind def
 % Graham Scal algorithm to compute the convex hull of a set of
 % points. Code written by Bill Casselman,
 %  http://www.math.ubc.ca/~cass/graphics/text/www/
 %
 % [[X1 Y1] [X2 Y2] ... [Xn Yn]] hull -> [[...] ... [...]]
 %
/hulldict 32 dict def
hulldict begin

 % u - v
/vsub { 2 dict begin
/v exch def
/u exch def
[
  u 0 get v 0 get sub
  u 1 get v 1 get sub
]
end } def

 % u - v rotated 90 degrees
/vperp { 2 dict begin
/v exch def
/u exch def
[
  v 1 get u 1 get sub
  u 0 get v 0 get sub
]
end } def

/dot { 2 dict begin
/v exch def
/u exch def
  v 0 get u 0 get mul
  v 1 get u 1 get mul
  add
end } def

 % P Q
 % tests whether P < Q in lexicographic order
 % i.e xP < xQ, or yP < yQ if xP = yP
/comp { 2 dict begin
/Q exch def
/P exch def
P 0 get Q 0 get lt
  P 0 get Q 0 get eq
  P 1 get Q 1 get lt
  and
or
end } def

end

 % args: an array of points C
 % effect: returns the array of points on the boundary of
 %     the convex hull of C, in clockwise order

/ConvexHull {
(ConvexHull) DebugBegin
hulldict begin
/C exch def
/comp C quicksort
/n C length def
 % Q might circle around to the start
/Q n 1 add array def
Q 0 C 0 get put
Q 1 C 1 get put
/i 2 def
/k 2 def
 % i is next point in C to be looked at
 % k is next point in Q to be added
 % [ Q[0] Q[1] ... ]
 % scan the points to make the top hull
n 2 sub {
  % P is the current point at right
  /P C i get def
  /i i 1 add def
  {
    % if k = 1 then just add P
    k 2 lt { exit } if
    % now k is 2 or more
    % look at Q[k-2] Q[k-1] P: a left turn (or in a line)?
    % yes if (P - Q[k-1])*(Q[k-1] - Q[k-2])^perp >= 0
    P Q k 1 sub get vsub
    Q k 1 sub get Q k 2 sub get vperp
    dot 0 lt {
      % not a left turn
      exit
    } if
    /k k 1 sub def
  } loop
  Q k P put
  /k k 1 add def
} repeat

 % done with top half
 % K is where the right hand point is
/K k 1 sub def

/i n 2 sub def
Q k C i get put
/i i 1 sub def
/k k 1 add def
n 2 sub {
  % P is the current point at right
  /P C i get def
  /i i 1 sub def
  {
    % in this pass k is always 2 or more
    k K 2 add lt { exit } if
    % look at Q[k-2] Q[k-1] P: a left turn (or in a line)?
    % yes if (P - Q[k-1])*(Q[k-1] - Q[k-2])^perp >= 0
    P Q k 1 sub get vsub
    Q k 1 sub get Q k 2 sub get vperp
    dot 0 lt {
      % not a left turn
      exit
    } if
    /k k 1 sub def
  } loop
  Q k P put
  /k k 1 add def
} repeat

 % strip Q down to [ Q[0] Q[1] ... Q[k-2] ]
 % excluding the doubled initial point
[ 0 1 k 2 sub {
  Q exch get
} for ]
end
DebugEnd
} def

/qsortdict 8 dict def

qsortdict begin

 % args: /comp a L R x
 % effect: effects a partition into two pieces [L j] [i R]
 %     leaves i j on stack

/partition { 8 dict begin
/x exch def
/j exch def
/i exch def
/a exch def
dup type /nametype eq { load } if /comp exch def
{
  {
    a i get x comp exec not {
      exit
    } if
    /i i 1 add def
  } loop
  {
    x a j get comp exec not {
      exit
    } if
    /j j 1 sub def
  } loop

  i j le {
    % swap a[i] a[j]
    a j a i get
    a i a j get
    put put
    /i i 1 add def
    /j j 1 sub def
  } if
  i j gt {
    exit
  } if
} loop
i j
end } def

 % args: /comp a L R
 % effect: sorts a[L .. R] according to comp
/subsort {
 % /c a L R
[ 3 1 roll ] 3 copy
 % /c a [L R] /c a [L R]
aload aload pop
 % /c a [L R] /c a L R L R
add 2 idiv
 % /c a [L R] /c a L R (L+R)/2
3 index exch get
 % /c a [L R] /c a L R x
partition
 % /c a [L R] i j
 % if j > L subsort(a, L, j)
dup
 % /c a [L R] i j j
3 index 0 get gt {
  % /c a [L R] i j
  5 copy
  % /c a [L R] i j /c a [L R] i j
  exch pop
  % /c a [L R] i j /c a [L R] j
  exch 0 get exch
  % ... /c a L j
  subsort
} if
 % /c a [L R] i j
pop dup
 % /c a [L R] i i
 % if i < R subsort(a, i, R)
2 index 1 get lt {
  % /c a [L R] i
  exch 1 get
  % /c a i R
  subsort
}{
  4 { pop } repeat
} ifelse
} def

end % qsortdict

 % args: /comp a
 % effect: sorts the array a
 % comp returns truth of x < y for entries in a

/quicksort { qsortdict begin
dup length 1 gt {
 % /comp a
dup
 % /comp a a
length 1 sub
 % /comp a n-1
0 exch subsort
} {
pop pop
} ifelse
end } def
/debug {
    dup 1 add copy {==} repeat pop
} bind def
/DebugIT false def
/CheckIT false def
/DebugDepth 0 def
/DebugBegin {
  DebugIT {
    /DebugProcName exch def
    DebugDepth 2 mul string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    DebugProcName strcat ==
    /DebugDepth DebugDepth 1 add def
  }{
    pop
  } ifelse
} bind def
/DebugEnd {
  DebugIT {
    /DebugDepth DebugDepth 1 sub def
    DebugDepth 2 mul 2 add string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{ ( ) } ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    dup DebugDepth 2 mul (+-) putinterval
    ( done) strcat ==
  } if
} bind def
/strcat {
    exch 2 copy
    length exch length add
    string dup dup 5 2 roll
    copy length exch
    putinterval
} bind def
/nametostr {
    dup length string cvs
} bind def
/ShowCurve {
    { aload pop } forall
    8 -2 roll moveto curveto
} bind def
/CurveToString {
    (CurveToString) DebugBegin
    aload pop ([) 3 -1 roll 20 string cvs strcat (, ) strcat exch 20 string cvs strcat (]) strcat
    DebugEnd
} bind def
end % tx@IntersectDict

%%EndProcSet
%%BeginProcSet: pst-optexp.pro 0 0
%%
%% This is file `pst-optexp.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-optexp.dtx  (with options: `prolog')
%% 
%% This is a generated file.
%% 
%% Project: pst-optexp
%% Version: 5.2 (2014/11/26)
%% 
%% Copyright (C) 2007-2014 by Christoph Bersch <usenet@bersch.net>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%% 
%% This work has the LPPL maintenance status "maintained".
%% 
%% The current maintainer of this work is Christoph Bersch.
%% 
%% This work consists of the files pst-optexp.dtx and pst-optexp.ins
%% and the derived files
%%     pst-optexp.sty, pst-optexp.pro.
%% 
/tx@OptexpDict 200 dict def
tx@OptexpDict begin
/DebugOE false def
/DebugDepth 0 def
/DebugBegin {
  DebugOE {
    /DebugProcName ED
    DebugDepth 2 mul string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    DebugProcName strcat ==
    /DebugDepth DebugDepth 1 add def
  }{
    pop
  } ifelse
} bind def
/DebugEnd {
  DebugOE {
    /DebugDepth DebugDepth 1 sub def
    DebugDepth 2 mul 2 add string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{ ( ) } ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    dup DebugDepth 2 mul (+-) putinterval
    ( done) strcat ==
  } if
} bind def
/DebugMsg {
  DebugOE {
    DebugDepth 1 add 2 mul string
    0 1 DebugDepth 2 mul 1 add {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    exch strcat ==
  }{
    pop
  } ifelse
} bind def
/strcat {
    exch 2 copy
    length exch length add
    string dup dup 5 2 roll
    copy length exch
    putinterval
} bind def
/nametostr {
    dup length string cvs
} bind def
/PrintWarning {
  (Warning pst-optexp: ) exch strcat (\n) strcat print
} bind def
/CompUnknownWarning {
  (Component ') exch strcat (' unknown) strcat Warning
} bind def
/OneFiberCompWarning {
  (Found only one unsupported component in beam path, drawing no beam) Warning
} bind def
/FiberCompWarning {
  (Found an unsupported component in beam path, stopping beam path) Warning
} bind def
/inttostr {
  dup type /integertype eq {
    dup log 1 add floor cvi string cvs
  } if
} bind def
/calcNodes {
  (calcNode) DebugBegin
  /YG exch def /XG exch def
  /by exch YG sub def
  /bx exch XG sub def
  /ay YG 3 -1 roll sub def
  /ax XG 3 -1 roll sub def
  ax ay NormalizeVec bx by NormalizeVec VecAdd
  2 copy Pyth abs 1e-4 lt {
    pop pop ax ay -90 matrix rotate dtransform
  } if
  /cy ED /cx ED
  /c ax bx add ay by add Pyth def
  c 0 eq {
    ax ay bx by DotProd 0 gt {
      /cx ax def
      /cy ay def
    }{
      /cx ay def
      /cy ax neg def
    } ifelse
  } if
  cx cy NormalizeVec 2 copy
  XG YG VecAdd /Y@A ED /X@A ED
  XG YG 4 2 roll VecSub /Y@B ED /X@B ED
  true
  ax by mul ay bx mul sub 0 le {
    pop false
    Y@A X@A
    /X@A X@B def
    /Y@A Y@B def
    /X@B exch def
    /Y@B exch def
  } if
  DebugEnd
} bind def
/capHeight {
    dup mul neg exch abs dup 3 1 roll dup mul add sqrt sub
} bind def
/leftCurvedIfc {
  /R1 exch def /h exch def
  0 R1 abs dup R1 h capHeight exch sub R1 sign mul dup
  h exch atan exch
  h neg exch atan
  R1 0 lt {
    /ArcL /arcn load def
  } {
    /ArcL /arc load def
  } ifelse
  R1
} bind def
/rightCurvedIfc {
  /R2 exch def /h exch def
  0 R2 abs dup R2 h capHeight sub R2 sign mul dup
  h neg exch atan exch
  h exch atan
  R2 0 lt {
    /ArcR /arcn load def
  } {
    /ArcR /arc load def
  } ifelse
  R2
} bind def
/SlopeAngle {
  (SlopeAngle) DebugBegin
  @GetCenter 3 -1 roll @GetCenter @ABVect exch atan
  DebugEnd
} bind def
/DefineExtNode {%
  (DefineExtNode) DebugBegin
  @@y mul RefFac mul @@y0 add
  exch @@x mul RefFac mul @@x0 add exch
  DebugEnd
} bind def
/GetInternalNodeNames {
  (GetInternalNodeNames) DebugBegin
  /reverse ED
  dup cvn load /N get dup
  reverse { -1 1 } { 1 1 3 -1 roll } ifelse
  { inttostr
    3 -1 roll dup 4 1 roll exch NodeName 3 1 roll
  } for
  pop pop
  DebugEnd
} bind def
/GetInternalBeamNodes {
  (GetInternalBeamNodes) DebugBegin
  [ 3 1 roll GetInternalNodeNames ]
  { @GetCenter } forall
  DebugEnd
} bind def
/InitOptexpComp {%
  /@@x 0 def
  /@@y 0 def
  /@@x0 0 def
  /@@y0 0 def
  /@xref [0] def
  /@yref [0] def
  /RefFac 1 def
} bind def
/NewTempNodeComp {
  (NewTempNodeComp) DebugBegin
  /sc ED
  dup cvn
  6 dict dup 3 1 roll def begin
    /ambiguous false def
    /allowbeaminside false def
    /forcebeaminside false def
    /name ED
    /correct false def
    {0 0} exch 3 -1 roll exec
    gsave
      translate
      /CompMtrx CM def
    grestore
    /N 1 def
    /n bgRefIndex def
    5 dict dup dup /P@1 ED /P@N ED
    begin
      /mode trans def
      {} 0 0 PlainIfc
    end
  /adjustRel true def
  end
  DebugEnd
} bind def
/CurvedIfc {
  5 2 roll
  2 copy 5 3 roll exec 3 -1 roll exec VecAdd
  5 -1 roll exec /Y ED /X ED
  exch exec 3 -1 roll 3 copy exec /RY ED /RX ED
  3 1 roll NormalizeVec 3 -1 roll exec
  tx@Dict begin Pyth end dup
  3 1 roll mul 1.00001 mul /NAup ED
  mul 1.00001 mul /NAlow ED
} bind def
/PlainIfc {
  5 2 roll
  dup 3 -1 roll exec NormalizeVec 3 -1 roll exec 2 copy /DY ED /DX ED
  tx@Dict begin Pyth end dup 4 2 roll
  exch exec 3 -1 roll exec /Y ED /X ED
  3 1 roll mul 1.00001 mul /NAup ED
  mul 1.00001 mul /NAlow ED
} bind def
/PathIfc {
  pop pop /NAup 0 def /NAlow 0 def
  3 1 roll /Path ED
  exec 3 -1 roll exec /Y ED /X ED
} bind def
/NewCompIfc {
  /scl ED
  /next ED
  dup (P@) exch strcat cvn
  6 dict dup
  3 1 roll def
  begin
    3 -1 roll
    /mode ED
    6 -1 roll dup 7 -1 roll
    {scl} 8 -2 roll next
  end
  exec scl ToVec 3 1 roll NodeName @NewNode
} bind def
/relative 0 def /absolute 1 def /center 2 def /firstcomp 3 def
/refl 0 def /trans 1 def /absorb 2 def /refltrans 3 def /auto 4 def /undefined -1 def
/desc 0 def /asc 1 def /amb 2 def
/ok 0 def /tir 1 def /missed 2 def
/bgRefIndex 0 def
/NewOptexpComp {
  (NewOptexpComp) DebugBegin
  /sc ED dup cvn
  gsave
  13 dict dup 3 1 roll def begin
  /name ED
  /forcebeaminside ED
  /allowbeaminside ED
  /ambiguous ED
  /grating false def
  dup type /booleantype eq not { false } if /correct ED
  tx@Dict begin
    STV {CP T} stopped pop
  end
  /CompMtrx CM def
  grestore
  counttomark dup 6 idiv dup /N ED 6 mul eq { 1 } if
  cvx 1 EvalRefIndex /n ED
  ambiguous {
    /ambIfc ED
  }{
    /ambIfc 0 def
  } ifelse
  1 N eq {
      name (1) 3 -1 roll {sc} NewCompIfc
      (1) (2) IfcCopy
      (2) (N) IfcAlias
  }{
    N -1 1 { %
      inttostr exch name 3 1 roll {sc} NewCompIfc
    } for
    N inttostr (N) IfcAlias
  } ifelse
  ambiguous ambIfc 0 gt and {
    ambIfc inttostr (C) IfcCopy
  } if
  end
  pop
  DebugEnd
} bind def
/NewOptexpFiberComp {
  (NewOptexpFiberComp) DebugBegin
  /sc ED dup cvn
  gsave
  12 dict dup 3 1 roll def begin
  /name ED
  tx@Dict begin
    STV {CP T} stopped pop
  end
  /CompMtrx CM def
  grestore
  counttomark /N ED
  1 N eq {
    {0 1} 0 0 trans name (1) {PlainIfc} {sc} NewCompIfc
    (1) (2) IfcCopy
    (2) (N) IfcAlias
  }{
    N -1 1 {
      inttostr
      {0 1} 0 0 absorb name 6 -1 roll {PlainIfc} {sc} NewCompIfc
    } for
    N inttostr (N) IfcAlias
  } ifelse
  end
  pop
  DebugEnd
} bind def
/IfcCopy {
  2 copy IfcName exch IfcName load dup
  length dict copy def
  name exch NodeName name 3 -1 roll NodeName
  tx@NodeDict begin
    load dup length dict copy def
  end
} bind def
/IfcAlias {
  2 copy IfcName exch IfcName load def
  tx@NodeDict begin
    name exch NodeName name 3 -1 roll NodeName load def
  end
} bind def
/CompAlias {
  2 copy cvn dup currentdict exch known {
    load def
  } {
    pop
  } ifelse
  tx@NodeDict begin
  1 {
    3 copy inttostr dup
    3 1 roll 2 copy NodeName
    currentdict exch known {
      NodeName load 3 1 roll NodeName ED
      1 add
    } {
      pop (N) NodeName load 3 1 roll
      pop (N) NodeName ED
      pop exit
    } ifelse
  } loop
  mark (A) (B) (@A) (@B) (Center) (Label) (Rotref)
       (TrefA) (TrefB) (@TrefA) (@TrefB) (Ext) (Origin)
  counttomark {
    counttomark 3 add -2 roll 2 copy counttomark 1 add 2 roll
    3 -1 roll dup 4 1 roll NodeName dup
    currentdict exch known {
      load 3 1 roll exch NodeName ED
    } {
      pop pop pop
    } ifelse
  } repeat pop
  exch 1 1 8 {
    3 copy
    (Ext) exch 5 string cvs strcat dup 3 1 roll
    NodeName 3 1 roll NodeName
    dup currentdict exch known {
      load def pop
    } {
      pop pop pop exit
    } ifelse
  } for
  pop pop
  end
} bind def
/GetPlaneVec {
  (GetPlaneVec) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /RX known {
        RX RY CompMtrx dtransform CM idtransform
        neg exch
      } {
        DX DY CompMtrx dtransform CM idtransform
      } ifelse
    end
  end
  DebugEnd
} bind def
/GetIfcCenter {
  (GetIfcCenter) DebugBegin
  dup type /stringtype eq not {
    dup xcheck not {
      0 get (C) exch
    } {
      exec pop pop pop
    } ifelse
  } if
  cvn load begin
    IfcName load begin
      currentdict /RX known {
        X RX sub Y RY sub
      } {
        X Y
      } ifelse
      CompMtrx transform CM itransform
    end
  end
  DebugEnd
} bind def
/GetIfcCenterCorr {
  (GetIfcCenterCorr) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /XCorr known {
        XCorr YCorr
      }{
        X Y
      } ifelse
      currentdict /RX known {
        RX neg RY neg VecAdd
      } if
      CompMtrx transform CM itransform
    end
  end
  DebugEnd
} bind def
/TransformInVec {
  (TransformInVec) DebugBegin
  3 1 roll
  GetIfcCenter 4 2 roll
  GetIfcCenter 5 -2 roll
  @ABVect
  3 -1 roll exec 2 copy 6 2 roll
  0 eq exch 0 eq and not {
    exch atan matrix rotate dtransform
  } {
    4 2 roll pop pop
  } ifelse
  ToVec
  DebugEnd
} bind def
/TransformStartPos {
  (TransformStartPos) DebugBegin
  exec 2 copy 6 2 roll 0 eq exch 0 eq and not
  3 1 roll GetIfcCenter 4 2 roll
  GetIfcCenter 5 2 roll {
    2 copy 8 2 roll
    @ABVect exch atan matrix rotate dtransform
    VecAdd
  } {
    6 2 roll pop pop pop pop
  } ifelse
  ToVec
  DebugEnd
} bind def
/GetNearestPlane {
  (GetNearestPlane) DebugBegin
  3 copy 1 exch GetIfcCenter @ABDist /dist ED /nearestPlane 1 def
  dup cvn load /N get 2 1 3 -1 roll {
    4 copy exch GetIfcCenter @ABDist dup dist lt {
      /dist ED /nearestPlane ED
    } {
      pop pop
    } ifelse
  } for
  pop pop pop nearestPlane
  DebugEnd
} bind def
/PushAmbCompPlanesOnStack {
 (PushAmbCompPlanesOnStack) DebugBegin
  currentdict /outToPlane undef
  PN IfcCnt eq not {
    exch dup 3 1 roll % nextifc ambcomp nextifc
    dup xcheck not {
      0 get (C) exch
    } {
      exec pop pop pop
    } ifelse
    [ 3 1 roll ] cvx /outToPlane ED
  } if
  /IfcCntTmp IfcCnt def
  aload pop /draw ED /name ED
  name cvn load /N get dup /N ED
  1 eq { /draw true def } if
  currentdict /Curr known {
    /CurrTmp /Curr load def
    /CurrVecTmp /CurrVec load def
  } {
    /CurrTmp /CurrLow load def
    /CurrVecTmp /CurrVecLow load def
  } ifelse
  PN 1 eq {
    [ (C) name name GetRefIndex trans draw] cvx
    name /outToPlane load GetNextPlane
    dup 0 eq not {
      [ exch name bgRefIndex trans draw ] cvx exch
      /IfcCntTmp IfcCntTmp 1 add def
    } {
      pop
    } ifelse
  }{
    CurrTmp name GetNearestPlane dup /firstPlane ED
    name isAmbiguousIfc not {
      firstPlane name
      name firstPlane GetIfcMode
      connectifc { bgRefIndex }{ name GetRefIndex } ifelse
      CurrTmp CurrVecTmp
      10 dict begin HandleInterface end pop
      ToVec /CurrVecTmp ED ToVec /CurrTmp ED
      [ firstPlane name
      connectifc {
        bgRefIndex
      }{
        name GetRefIndex
      } ifelse
      name firstPlane GetIfcMode
      true ] cvx
      /IfcCntTmp IfcCntTmp 1 add def
    } if
    PN IfcCnt eq {
      [ (C) name
      name GetRefIndex
      trans draw ] cvx
      IfcCntTmp IfcCnt gt { exch } if
    }{
      beamdiffractionorder null eq not name cvn load /grating get and {
        beamdiffractionorder dup 0 eq { pop () } if
        (C) exch 20 string cvs strcat
        dup (P@) exch strcat cvn name cvn load exch known not {
          pop beamdiffractionorder dup sign neg 1 {
            (C) exch 5 string cvs dup 3 1 roll strcat
            dup (P@) exch strcat cvn name cvn load exch known {
              3 -1 roll pop
              (Diffraction order ) beamdiffractionorder 5 string cvs strcat
              ( is not defined, using ) 4 -1 roll strcat strcat Warning
              exit
            } {
              pop
            } ifelse
          } for
        } if
        /@@centerifc ED
        mark @@centerifc name name GetRefIndex
        beamdiffractionorder 0 eq {
          trans
        }{
          name @@centerifc GetIfcMode refltrans eq {
            refltrans
          }{
            refl
          } ifelse
        } ifelse
      }{
        /@@centerifc (C) def
        [ @@centerifc name
        name GetRefIndex
        beammode auto eq {
          CurrVecTmp @@centerifc name GetPlaneVec
          name @@centerifc GetIfcMode refltrans eq { -90 matrix rotate dtransform } if
          NormalVec outToPlane GetIfcCenter @@centerifc name GetIfcCenter @ABVect DotProd
          0 lt {
            trans
          }{
            name @@centerifc GetIfcMode
            refltrans eq {
              refltrans
            }{
              refl
            } ifelse
          } ifelse
        } {
          beammode dup refl eq {
            pop name @@centerifc GetIfcMode dup refltrans eq not { pop refl } if
          } if
        } ifelse
      } ifelse
      dup 6 1 roll
      IfcCntTmp IfcCnt eq { true }{ draw } ifelse
      ] cvx
      @@centerifc name 4 -1 roll
      connectifc { bgRefIndex }{ name GetRefIndex } ifelse
      CurrTmp CurrVecTmp
      10 dict begin HandleInterface end pop
      ToVec /CurrVecTmp ED ToVec /CurrTmp ED
      name /outToPlane load GetNextPlane
      dup dup name isAmbiguousIfc exch 0 eq or not {
        [ exch name bgRefIndex trans draw ] cvx exch
        firstPlane name isAmbiguousIfc not { 3 -1 roll } if
        /IfcCntTmp IfcCntTmp 1 add def
      } {
        pop
        exec 3 -1 roll pop bgRefIndex 3 1 roll [ 6 1 roll ] cvx
        firstPlane name isAmbiguousIfc not { exch } if
      } ifelse
    } ifelse
  } ifelse
  /IfcCnt IfcCntTmp def
  DebugEnd
} bind def
/GetNextPlane {
  (GetNextPlane) DebugBegin
  2 copy (C) 3 -1 roll
  GetIfcCenter 3 -1 roll
  exec GetIfcCenter
  4 2 roll 4 copy @ABVect ToVec /Vec ED
  @ABDist /centerDist ED
  /sprod 1 def
  /nextPlane 0 def
  exch dup 3 1 roll
  cvn load dup /ambIfc get /ambIfc ED /N get 1 1 3 -1 roll {
   dup ambIfc eq not {
      3 copy 3 -1 roll 2 copy
      GetPlaneVec Vec 4 2 roll NormalVec
      Vec DotProd dup sprod lt 5 2 roll
      GetIfcCenter 3 -1 roll exec GetIfcCenter @ABDist
      centerDist lt and
      centerDist -1 eq { pop dup 0 gt } if
      { /sprod ED /nextPlane ED } { pop pop } ifelse
    } {
      pop
    } ifelse
  } for
  pop pop nextPlane
  DebugEnd
} bind def
/TraceBeam {
  (Tracebeam) DebugBegin
  AngToVec /InVec ED /StartPoint ED
  /oldbeaminsidelast currentdict /beaminsidelast known {
    beaminsidelast
  } {
    false
  } ifelse def
  exec
  connectifc {
    /nbeam bgRefIndex def
  } if
  /startinside startinside beaminsidefirst or def
  /stopinside stopinside beaminsidelast or def
  /PrevCorrect false def
  PrearrangePlanes
  PushAllPlanesOnStack
  currentdict /lastVecTmp known {
    lastVecTmp beamangle matrix rotate dtransform ToVec
  } {
    counttomark 2 ge beamalign relative eq and {
      2 copy /InVec load TransformInVec
    } {
      /InVec load
    } ifelse
  } ifelse
  /CurrVec ED
  currentdict /lastBeamPointTmp known {
    /lastBeamPointTmp load /Curr ED
  }{
    counttomark 2 ge {
      2 copy /StartPoint load  TransformStartPos
    } {
      /StartPoint load
    } ifelse
    /Curr ED
  } ifelse
  counttomark /IfcCnt ED
  /n1 bgRefIndex def
  /PN 1 def
  (start looping) DebugMsg
  {
    PN IfcCnt gt {
      exit
    } if
    (checked) DebugMsg
    beampathcount 0 eq {
      cleartomark mark exit
    } if
    dup xcheck not {
      PushAmbCompPlanesOnStack
    } if
    exec
    /draw ED /Mode ED /n2 ED 2 copy /CompName ED /IfcNum ED
    GetIfcCenter ToVec /CurrCenter ED
    Curr CurrVec
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
      CurrVec CurrCenter PrevCenter PrevMode
      currentdict /relAngle known
      { relAngle } { 0 } ifelse connectInterfaces
      /relAngle ED
    } if
    CompName cvn load begin
      currentdict /adjustRel known aligntovector and {
        IfcNum IfcName load begin
          currentdict /RX known not {
            2 copy neg exch CM dtransform CompMtrx idtransform
            /DY ED /DX ED
          } if
        end
      } if
    end
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    missed eq {
      counttomark PN 1 sub 3 mul sub {pop} repeat
      (The beam missed an interface) Warning exit
      exit
    } if
    PN 1 eq {
      pop pop
      /draw beaminsidefirst oldbeaminsidelast xor def
    } {
      ToVec /CurrVec ED
    } ifelse
    2 copy
    ToVec /Curr ED
    draw PN beampathskip 1 add gt and
    counttomark 3 roll
    /PrevCenter /CurrCenter load def
    /lastBeamPointTmp /Curr load def
    currentdict /lastVecTmp known {
      /prevVecTmp /lastVecTmp load def
      /lastVecTmp /CurrVec load def
    } {
      /CurrVec load dup /lastVecTmp ED /prevVecTmp ED
    } ifelse
    /PrevMode Mode def
    CompName cvn load /correct get /PrevCorrect ED
    PN IfcCnt eq {
      exit
    } {
      CurrVec 0 eq exch 0 eq and {
        IfcCnt PN sub {pop} repeat
        (Total internal reflection occured, this is not supported)
        Warning
        exit
      } if
      beampathcount 1 add PN eq {
        IfcCnt PN sub {pop} repeat
        exit
      } if
      /PN PN 1 add def
    } ifelse
  } loop
  DebugEnd
} bind def
/sign {
    0 ge { 1 } { -1 } ifelse
} bind def
/Chirality {
  4 -1 roll mul 3 1 roll mul sub sign
} bind def
/TraceInterfacePath {
  tx@IntersectDict begin
    /ArrowA { {currentpoint} stopped {moveto}{pop pop pop pop} ifelse } def
    {} TraceCurveOrPath
    currentdict /ArrowA undef
  end
} bind def
/TraceAndFillWideBeam {
  (TraceAndFillWideBeam) DebugBegin
  AngToVec /InvecLow ED /StartLow ED
  AngToVec /InvecUp ED /StartUp ED
  exec
  connectifc {
    /nbeam bgRefIndex def
  } if
  /startinside startinside beaminsidefirst or def
  /stopinside stopinside beaminsidelast or def
  /DrawnSegm 0 def
  /PrevCorrect false def
  PrearrangePlanes
  PushAllPlanesOnStack
  currentdict /lastVecTmpUp known
  currentdict /lastVecTmpLow known and {
    /CurrVecLow lastVecTmpLow beamangle matrix rotate dtransform ToVec def
    /CurrVecUp lastVecTmpUp beamangle matrix rotate dtransform ToVec def
  }{
    beamalign relative eq counttomark 2 ge and {
      2 copy /InvecLow load TransformInVec /CurrVecLow ED
      2 copy /InvecUp load TransformInVec /CurrVecUp ED
    } {
      /CurrVecLow /InvecLow load def
      /CurrVecUp /InvecUp load def
    } ifelse
  } ifelse
  currentdict /lastBeamPointTmpLow known
  currentdict /lastBeamPointTmpUp known and {
    /lastBeamPointTmpLow load /CurrLow ED
    /lastBeamPointTmpUp load /CurrUp ED
    loadbeam not beamdiv 0 eq not and {
      CurrVecLow CurrVecUp Chirality
      CurrLow CurrUp @ABVect CurrVecLow CurrVecUp VecAdd Chirality 0 lt { neg } if
      beamdiv sign eq not {
        /CurrVecLow load /CurrVecUp load /CurrVecLow ED /CurrVecUp ED
      } if
    } if
  } {
    counttomark 2 ge {
      2 copy /StartLow load TransformStartPos /CurrLow ED
      2 copy /StartUp load TransformStartPos /CurrUp ED
    } {
      /StartLow load /CurrLow ED
      /StartUp load /CurrUp ED
    } ifelse
  } ifelse
  /PrevVecUp /CurrVecUp load def
  /PrevVecLow /CurrVecLow load def
  counttomark /IfcCnt ED
  /n1 bgRefIndex def
  /CurrR false def
  /CurrPath false def
  /CurrUpT false def
  /CurrLowT false def
  /ret missed def
  /PN 1 def
  {
    PN IfcCnt gt {
      exit
    } if
    beampathcount 0 eq {
      cleartomark mark exit
    } if
    dup xcheck not {
      PushAmbCompPlanesOnStack
    } if
    exec
    PN beampathskip 1 add gt and /draw ED
    /Mode ED /n2 ED 2 copy /CompName ED /IfcNum ED
    GetIfcCenter ToVec /CurrPCenter ED
    /oldn1 n1 def
    CompName cvn load /adjustRel known aligntovector and {
      connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
        CurrVecUp CurrVecUp CurrPCenter PrevPCenter PrevMode
        currentdict /relAngleUp known { relAngleUp } { 0 } ifelse
        connectInterfaces pop
        CurrVecLow CurrVecLow CurrPCenter PrevPCenter PrevMode
        currentdict /relAngleLow known { relAngleLow } { 0 } ifelse
        connectInterfaces pop
      } {
        CurrVecUp CurrVecLow
      } ifelse
      VecAdd NormalizeVec
      CompName cvn load begin
        IfcNum IfcName load begin
          currentdict /RX known not {
            CM dtransform CompMtrx idtransform
            /DX ED neg /DY ED
          } {
            pop pop
          } ifelse
        end
      end
    } if
    CurrUp CurrVecUp
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
      CurrVecUp CurrPCenter PrevPCenter PrevMode
      currentdict /relAngleUp known { relAngleUp } { 0 } ifelse
      connectInterfaces /relAngleUp ED
    } if
    /PrevUp /CurrUp load def
    /PrevUpT /CurrUpT load def
    /PrevPath /CurrPath load def
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    dup /ret ED
    missed eq {
      counttomark {pop} repeat
      (The upper beam missed an interface) Warning exit
    } if
    ToVec /CurrVecUp ED
    ToVec /CurrUp ED
    currentdict /isectT known currentdict /isectPath known and {
      /CurrUpT isectT def
      /CurrPath isectPath def
    } if
    /n1 oldn1 def
    /PrevLow /CurrLow load def
    /PrevLowT /CurrLowT load def
    CurrLow CurrVecLow
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and  {
      CurrVecLow CurrPCenter PrevPCenter PrevMode
      currentdict /relAngleLow known { relAngleLow } { 0 } ifelse
      connectInterfaces /relAngleLow ED
    } if
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    dup missed eq {
      /ret ED
      (The lower beam missed an interface) Warning
      counttomark {pop} repeat exit
    } if
    tir eq ret tir eq or {
      /ret tir def
    } {
      /ret ok def
    } ifelse
    ToVec /CurrVecLow ED
    ToVec /CurrLow ED
    currentdict /isectT known {
      /CurrLowT isectT def
    } if
    /PrevR CurrR def
    PrevR type /realtype eq {
      /CurrCenter load /PrevCenter ED
    } if
    IfcNum CompName isCurvedIfc {
      IfcNum CompName LoadIfc
      tx@Dict begin Pyth end /CurrR ED
      ToVec /CurrCenter ED
    } {
      /CurrR false def
      /CurrCenter false def
    } ifelse
    IfcNum CompName isPathIfc not {
      /CurrPath false def
      /CurrLowT false def
      /CurrUpT false def
    } if
    PN 1 gt currentdict /fillBeam known and {
      draw {
        /DrawnSegm DrawnSegm 1 add def
        PrevUp moveto CurrUp lineto
        IfcNum CompName isCurvedIfc {
          CurrCenter CurrUp CurrLow
          4 copy 3 -1 roll eq 3 1 roll eq and {
            6 {pop} repeat
          } {
            TangentCrosspoint
            CurrLow CurrR arct
          } ifelse
        } {
          IfcNum CompName isPathIfc {
            CurrPath CurrUpT CurrLowT TraceInterfacePath
          } {
            CurrLow lineto
          } ifelse
        } ifelse
        PrevLow lineto
        PrevPath type /booleantype eq not {
          PrevPath PrevLowT PrevUpT TraceInterfacePath
        } {
          PrevR type /booleantype eq not {
            PrevCenter PrevLow PrevUp
            4 copy 3 -1 roll eq 3 1 roll eq and {
              6 {pop} repeat
            } {
              TangentCrosspoint
              PrevUp PrevR arct
            } ifelse
          } {
            PrevUp lineto
          } ifelse
        } ifelse
      } if
      Mode refl eq draw and
      draw not DrawnSegm 0 gt and or {
        fillBeam newpath
        /DrawnSegm 0 def
      } if
    } if
    PN 1 eq {
      /CurrVecUp /PrevVecUp load def
      /CurrVecLow /PrevVecLow load def
    } if
    strokeBeam {
      CurrUp draw CurrLow draw counttomark 1 add 6 roll
    } if
    PN IfcCnt eq ret tir eq or
    beampathcount 1 add PN eq or {
      DrawnSegm 0 gt currentdict /fillBeam known and {
        fillBeam newpath
        /DrawnSegm 0 def
      } if
      IfcCnt PN sub {pop} repeat
      ret tir eq {
        (Total internal reflection occured, this is not supported)
        Warning
      } if
      exit
    } if
    /PN PN 1 add def
    /PrevVecUp /CurrVecUp load def
    /PrevVecLow /CurrVecLow load def
    /PrevPCenter /CurrPCenter load def
    /PrevMode Mode def
    CompName cvn load /correct get /PrevCorrect ED
  } loop
  DrawnSegm 0 gt currentdict /fillBeam known and {
    fillBeam newpath
    /DrawnSegm 0 def
  } if
  ret missed eq not {
    CurrLow CurrUp @ABVect % from Low to Up
    PrevVecUp PrevVecLow VecAdd
    2 copy 6 2 roll
    Chirality 0 lt
    3 1 roll 2 copy pop -1e-5 lt
    3 1 roll exch 1e-5 lt exch 0 lt and or xor {
      /lastBeamPointTmpUp /CurrLow load def
      /lastBeamPointTmpLow /CurrUp load def
      /lastVecTmpUp /CurrVecLow load def
      /lastVecTmpLow /CurrVecUp load def
    } {
      /lastBeamPointTmpLow /CurrLow load def
      /lastBeamPointTmpUp /CurrUp load def
      /lastVecTmpUp /CurrVecUp load def
      /lastVecTmpLow /CurrVecLow load def
    } ifelse
    /lastVecTmpUp load /lastVecTmpLow load
    /prevVecLow ED /prevVecUp ED
  } if
  DebugEnd
} bind def
/DrawbeamPrepare {
  {
    counttomark 6 le { exit } if
    3 index not { pop pop pop }{ exit } ifelse
  } loop
  {
    counttomark 3 le { exit } if
    counttomark 3 sub index not {
      counttomark -3 roll pop pop pop
    }{
      exit
    } ifelse
  } loop
} bind def
/DrawbeamSimple {
  pop 5 copy 3 -1 roll pop
  ArrowA pop pop pop pop
  counttomark 3 idiv -1 2 {
    pop {
      lineto
    }{
      moveto
    } ifelse
  } for
  {CP 4 2 roll ArrowB lineto pop pop } {moveto} ifelse
} bind def
/DrawbeamArrowInside {
  6 copy pop
  /y1 ED /x1 ED pop /y2 ED /x2 ED
  /Alpha y2 y1 sub x2 x1 sub Atan def
  pop 3 -1 roll 5 1 roll
  ArrowA
  x1 Alpha cos arrowlength mul add
  y1 Alpha sin arrowlength mul add
  5 -1 roll 3 1 roll true
  /N N 1 sub def
  N {
    6 copy pop
    /y1 ED /x1 ED pop /y2 ED /x2 ED /draw ED
    x1 y1 x2 y2 @ABDist dup
    arrowminlength ge
    exch arrowmaxlength dup 0 lt
    3 1 roll le or and {
      x1 y1
      arrowpos 1 gt {
        /Alpha y2 y1 sub x2 x1 sub Atan def
        /dArrowPos dArrowPosStart abs def
        /ArrowPos ArrowPosStart def
        arrowno {
          /ArrowPos ArrowPos dArrowPos add def
          x1 Alpha cos ArrowPos mul add
          y1 Alpha sin ArrowPos mul add
          6 index { ArrowInside } if
          pop pop
        } repeat
      }{
        arrowno 1 gt {
          1.0 arrowno 1.0 add div
        }{
          dArrowPosStart
        } ifelse /dArrowPos ED
        /ArrowPos ArrowPosStart def
        arrowno {
          /ArrowPos ArrowPos dArrowPos add def
          x2 x1 sub ArrowPos mul x1 add
          y2 y1 sub ArrowPos mul y1 add
          6 index { ArrowInside } if
          pop pop
        } repeat
      } ifelse
      pop pop
    } if
    draw {Lineto}{moveto} ifelse
  } repeat
  {CP 4 2 roll ArrowB lineto pop pop } {moveto} ifelse
} bind def
/isAmbiguous {
  cvn load dup /ambiguous known {
    /ambiguous get
  } {
    pop false
  } ifelse
} bind def
/isAmbiguousIfc {
  cvn load dup /ambiguous known {
    /ambIfc get eq
  } {
    pop pop false
  } ifelse
} bind def
/isCurvedIfc {
  cvn load begin
    IfcName load /RX known
  end
} bind def
/isPathIfc {
  cvn load begin
    IfcName load /Path known
  end
} bind def
/HandleInterface {
  (HandleInterface) DebugBegin
  /Yin ED /Xin ED /Y0 ED /X0 ED /n2 ED /mode ED
  currentdict /isectT undef currentdict /isectPath undef
  2 copy 2 copy LoadIfc % IfcNum name IfcNum name path
  dup type /arraytype eq { % is an path interface
    dup /isectPath exch def
    3 1 roll pop pop PathInterface % IfcNum name t X0' Y0' Xout Yout status
    dup missed eq not { 6 -1 roll /isectT exch def } if
  } {
    6 -2 roll
    isCurvedIfc { CurvedInterface }{ PlainInterface } ifelse
  } ifelse
  dup missed eq not useNA connectifc not and and {
    7 3 roll 2 copy 9 2 roll
    4 2 roll 2 copy
    %% X0' Y0' Xout Yout status X0' Y0' IfcNum CompName IfcNum CompName
    cvn load begin IfcName load dup /NAlow get exch /NAup get end
    2 copy lt {
      4 2 roll 2 copy LoadIfc NormalizeVec
      6 -2 roll isCurvedIfc {
        neg exch
      } if
      %% ... X0' Y0' NAlow NAup X Y dXp dYp
      8 -2 roll 6 -2 roll
      %% ... NAlow NAup dXp dYp X0' Y0' X Y
      @ABVect DotProd
      dup 4 -1 roll ge 3 1 roll ge and not
      {
        pop missed
      } if
    }{
      6 {pop} repeat
    } ifelse
  } {
    7 -2 roll pop pop
  } ifelse
  DebugEnd
} bind def
/LoadIfc {
  (LoadIfc) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /Path known {
        Path TransformPath
      } {
        X Y
        CompMtrx transform CM itransform
        currentdict /RX known { RX RY }{ DX DY } ifelse
        CompMtrx dtransform CM idtransform
      } ifelse
    end
  end
  DebugEnd
} bind def
/isFreeray {
  cvn load /n known
} bind def
/compIsKnown {
  dup type /stringtype eq { cvn } if
  tx@OptexpDict exch known
} bind def
/PrearrangePlanes {
  (PrearrangePlanes) DebugBegin
  counttomark dup 2 lt {
    dup 0 eq {
      (Found no component on stack, drawing no beam) PrintWarning
    }{
      exch dup
      compIsKnown {
        dup isFreeray {
          asc exch 3 -1 roll
        }{
          OneFiberCompWarning
          pop
        } ifelse
      }{
        CompUnknownWarning
      } ifelse
    } ifelse
    /N 0 def
  }{
    /N ED
    /CompA ED dup /CompB ED
    CompA compIsKnown CompB compIsKnown and {
      CompA isFreeray {
        CompA isAmbiguous {
          amb dup CompA
        } {
          CompB isAmbiguous {
            1 CompA GetIfcCenter (C) CompB GetIfcCenter @ABDist
            (N) CompA GetIfcCenter (C) CompB GetIfcCenter @ABDist
          } {
            1 CompA GetIfcCenter
            1 CompB GetIfcCenter
            (N) CompB GetIfcCenter
            true OrderNodes exch pop
            (N) CompA GetIfcCenter
            1 CompB GetIfcCenter
            (N) CompB GetIfcCenter
            true OrderNodes exch pop
          } ifelse
          le { desc } { asc } ifelse dup CompA
        } ifelse
        counttomark 2 roll
      }{
        FiberCompWarning
        counttomark 1 sub { pop } repeat
        /N 0 def
      } ifelse
    }{
      /N 0 def
      CompA compIsKnown not {CompA}{CompB} ifelse
      CompUnknownWarning
    } ifelse
  } ifelse
  2 1 N {
    /i ED exch /CompB ED
    CompB compIsKnown not {
      counttomark i 1 sub 2 mul 1 add sub { pop } repeat
      CompB CompUnknownWarning
      exit
    } if
    CompB isFreeray not {
      counttomark i 1 sub 2 mul 1 add sub { pop } repeat
      FiberCompWarning
      exit
    } if
    CompB isAmbiguous not {
      dup desc eq { 1 } { dup amb eq { (C) }{ (N) } ifelse } ifelse
      CompA GetIfcCenter
      1 CompB GetIfcCenter
      (N) CompB GetIfcCenter false OrderNodes dup dup
      4 -1 roll CompA exch 5 -1 roll CompB exch
      i 2 eq {
        4 copy 4 2 roll AdjustRelRot
      } if
      AdjustRelRot
    } {
      i 2 eq {
        CompB amb CompA desc AdjustRelRot
      } if
      pop amb dup
    } ifelse
    CompB /CompA CompB def
    counttomark 2 roll
  } for pop
  DebugEnd
} bind def
/AdjustRelRot {
  (AdjustRelRot) DebugBegin
  exch dup cvn load /adjustRel known aligntovector not and {
    dup dup 4 2 roll isAmbiguous {
      exch pop (C)
    }{
      desc eq { (N) }{ 1 } ifelse
    } ifelse
    exch GetIfcCenter 5 3 roll
    exch dup 3 1 roll isAmbiguous {
      pop (C)
    }{
      desc eq { 1 }{ (N) } ifelse
    } ifelse
    exch GetIfcCenter
    @ABVect exch atan exch
    cvn load begin
      adjustRel {
        matrix rotate CompMtrx matrix concatmatrix /CompMtrx ED
        /adjustRel false def
      } {
        pop
      } ifelse
    end
  } {
    pop pop pop pop
  } ifelse
  DebugEnd
} bind def
/PushAllPlanesOnStack {
  (PushAllPlanesOnStack) DebugBegin
  counttomark 2 div cvi /@N ED
  1 1 @N {
    /last false def
    /first false def
    dup 1 eq {
      /first true def pop beaminsidefirst
    } {
      @N eq {
        beaminsidelast
        /last true def
      } {
        beaminside
      } ifelse
    } ifelse
    exch load dup dup
    /forcebeaminside get {
      3 -1 roll pop true
    } {
      dup /allowbeaminside get 4 -1 roll and
    } ifelse
    /drawinside ED
    /ambiguous get {
      /name get drawinside [ 3 1 roll ]
      counttomark 1 roll pop
    } {
      begin
        desc eq {
          N N -1 1 1
        } {
          1 1 1 N N
        } ifelse
        first {
          startinside not {
            5 -2 roll
            pop pop
            2 copy 5 2 roll
          } {
            startinsidecount 0 gt N startinsidecount sub 1 gt and {
              3 -1 roll dup 4 1 roll
              N 1 sub startinsidecount sub mul
              6 -2 roll pop add dup 5 2 roll
            } if
          } ifelse
        } if
        last stopinsidecount 0 gt N stopinsidecount sub 1 gt and and {
          % 1 1 1 N N
          3 -1 roll dup 4 1 roll stopinsidecount mul
          6 -1 roll dup 7 1 roll add 3 1 roll pop pop dup
        } if
        5 1 roll
        {
          3 1 roll 2 copy 5 -1 roll
          dup 3 1 roll
          eq first not and {
            true
          } {
            drawinside
          } ifelse
          exch dup 4 -1 roll eq {
            bgRefIndex
          }{
            name GetRefIndex
          } ifelse
          exch inttostr exch
          3 1 roll name
          4 1 roll
          dup IfcName load /mode get
          3 1 roll 5 1 roll
          [ 6 1 roll ] cvx counttomark 1 roll
          last {
            savebeampoints 1 ge stopinside not and
            savebeampoints 1 lt beaminsidelast not and or {
              exit
            } if
          } if
        } for pop pop
      end
    } ifelse
  } for
  DebugEnd
  counttomark 1 eq { pop } if
} bind def
/IfcName {
  inttostr (P@) exch strcat cvn
} bind def
/GetIfcMode {
  exch cvn load begin
    IfcName load /mode get
  end
} bind def
/NodeName {
  dup /stringtype eq not { inttostr } if
  strcat (N@) exch strcat cvn
} bind def
/OrderNodes {
   7 1 roll 6 -2 roll 2 copy 8 2 roll
   @ABDist 5 1 roll @ABDist 2 copy gt {
       pop asc exch
   } {
       exch pop desc exch
   } ifelse
   3 -1 roll not {
       pop
   } if
} bind def
/NormalVec {
  neg exch 2 copy 6 2 roll DotProd 0 gt {
    -1 mul exch -1 mul exch
  } if
  NormalizeVec
} bind def
/DotProd {
    3 -1 roll mul 3 1 roll mul add
} bind def
/VecAngle {
  4 copy 4 copy DotProd 5 1 roll
  tx@Dict begin
    Pyth 3 1 roll Pyth
  end mul
  div Acos
  5 2 roll mul 4 1 roll 3 -1 roll mul 3 -1 roll sub
  0 le { -1 }{ 1 } ifelse mul
} bind def
/VecAdd {
    3 -1 roll add 3 1 roll add exch
} bind def
/VecSub {
    neg 3 -1 roll add 3 1 roll neg add exch
} bind def
/VecScale {
  dup 4 -1 roll mul 3 1 roll mul
} bind def
/ToVec {
    ToPnt cvx
} bind def
/ToPnt {
    [ 3 1 roll ]
} bind def
/AngToVec {
    dup cos exch sin ToVec
} bind def
/NormalizeVec {
  2 copy
  tx@Dict begin
    Pyth
  end
  dup 3 1 roll div 3 1 roll div exch
} bind def
/@ABVect {
  3 -1 roll exch sub 3 1 roll sub exch
} bind def
/@ABDist {
  3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt
} bind def
/@InterLines {
  tx@EcldDict begin
    EqDr /D1c exch def /D1b exch def /D1a exch def
    EqDr /D2c exch def /D2b exch def /D2a exch def
    D1a D2b mul D1b D2a mul sub dup
    ZeroEq { % parallel lines
      pop 0 0 missed
    }{
      /Det exch def
      D1b D2c mul D1c D2b mul sub Det div
      D1a D2c mul D2a D1c mul sub Det div
      ok
    } ifelse
  end
} bind def
/@GetCenter {
  tx@NodeDict begin load GetCenter end
} bind def
/@NewNode {
  tx@NodeDict begin
    false exch 10 {InitPnode } NewNode
  end
} bind def
/RefractVec {
  (RefractVec) DebugBegin
  TransformRefIndex exch TransformRefIndex exch div /n ED
  /Ynorm ED /Xnorm ED
  NormalizeVec /Yin ED /Xin ED
  n abs 1 eq {
    Xin Yin
  }{
    /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
    1 n dup mul 1 costheta1 dup mul sub mul sub
    dup 0 lt {
      pop 0 0
    } {
      sqrt /costheta2 ED
      n Xin mul n Yin mul
      n costheta1 mul costheta2 sub dup
      Xnorm mul exch Ynorm mul VecAdd
    } ifelse
  } ifelse
  DebugEnd
} bind def
/ReflectVec {
  (ReflectVec) DebugBegin
  /Ynorm ED /Xnorm ED NormalizeVec /Yin ED /Xin ED
  /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
  Xin Yin 2 costheta1 mul dup Xnorm mul exch Ynorm mul VecAdd
  DebugEnd
} bind def
/ReflectGratVec {
  (ReflectGratVec) DebugBegin
  /Ynorm ED /Xnorm ED NormalizeVec /Yin ED /Xin ED
  /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
  Xin Yin -2 costheta1 mul dup Xnorm mul exch Ynorm mul VecAdd
  DebugEnd
} bind def
/CurvedInterface {
  (CurvedInterface) DebugBegin
  2 copy /Yr ED /Xr ED
  tx@Dict begin Pyth end /radius ED /Yp ED /Xp ED
  /X0n X0 Xp sub def /Y0n Y0 Yp sub def
  tx@EcldDict begin
    X0n Y0n 2 copy 2 copy Xin 3 -1 roll add Yin 3 -1 roll add
    2 copy 6 2 roll EqDr radius InterLineCircle
  end
  4 copy
  0 eq 3 {exch 0 eq and} repeat {
    missed
  } {
    4 copy
    Xr neg Yr neg 2 copy
    8 -2 roll @ABDist
    5 1 roll @ABDist
    gt {
      4 2 roll
    } if pop pop
    Xp Yp VecAdd
    2 copy Xp Yp 4 2 roll @ABVect exch neg Xin Yin 4 2 roll NormalVec
    Xin Yin 4 2 roll
    mode trans eq {
      n1 n2 RefractVec
      2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
    } {
      ReflectVec ok
    } ifelse /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
  } ifelse
  DebugEnd
} bind def
/PlainInterface {%
  (PlainInterface) DebugBegin
  /dYp ED /dXp ED /Yp ED /Xp ED
  Xp Yp Xp dXp add Yp dYp add X0 Y0 X0 Xin add Y0 Yin add
  @InterLines missed eq {
    0 0 missed
  } {
    Xin Yin Xin Yin dXp dYp
    mode refltrans eq {
      neg exch NormalVec ReflectVec ok
    } {
      NormalVec
      mode trans eq {
        n1 n2 RefractVec
        2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
      } {
        ReflectVec ok
      } ifelse
    } ifelse
    /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
  } ifelse
  DebugEnd
} bind def
/PathInterface {
  (PathInterface) DebugBegin
  [ [X0 Y0] [X0 Xin add Y0 Yin add] ] exch
  tx@IntersectDict begin IntersectLinePath end % [pathseg] t [isect]
  dup length 0 eq {
    pop pop pop 0 0 missed
  } {
    aload pop
    Xin Yin Xin Yin
    8 -2 roll exch % I.x I.y Xin Yin Xin Yin t [pathseg]
    exch dup 9 1 roll exch % t I.x I.y Xin Yin Xin Yin t [pathseg]
    dup length 2 eq { % a line
      exch pop
      aload pop aload pop 3 -1 roll aload pop VecSub % t I.x I.y Xin Yin Xin Yin dXp dYp
    } {
      exch dup cvi sub DeriveCurve
    } ifelse
    % the following part is copied from /PlainInterface
    NormalVec
    mode trans eq {
      n1 n2 RefractVec
      2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
    } {
      ReflectVec ok
    } ifelse
    /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
    % t X0' Y0' Xout Yout status
  } ifelse
  DebugEnd
} bind def
/TransformRefIndex {
  dup bgRefIndex eq { pop 1 } if
} bind def
/GetRefIndex {
  cvn load /n get /nbeam load exch
  EvalRefIndex
} bind def
/EvalRefIndex {
  dup bgRefIndex eq not {
    1 dict begin
      /n ED
      exec
    end
  } if
} bind def
/Sellmaier {
  dup mul
  dup dup 1.03961212 mul exch 6000.69867 sub div
  exch dup dup 0.231792344 mul exch 20017.9144 sub div
  exch dup 1.01046945 mul exch 103.560653e6 sub div
  add add 1 add sqrt
} bind def
/TangentCrosspoint {
    4 copy 4 copy 14 -2 roll 2 copy
    6 2 roll @ABVect neg exch
    6 2 roll @ABVect neg exch
    8 -2 roll VecAdd 10 2 roll VecAdd
    @InterLines pop
} bind def
/NearestNodeTmp {
  exch /NodeB ED
  /dist -1 def
  dup cvn load /N get dup 1 eq {
    [ exch (N) ]
  } {
    [ exch 1 1 3 -1 roll { } for ]
  } ifelse
  {
    2 copy pop
    GetIfcCenterCorr 2 copy
    NodeB @ABDist
    dist 0 lt {
      /dist ED
      ToVec /node ED
    } {
      dup dist lt {
        /dist ED
        ToVec /node ED
      } {
        pop pop pop
      } ifelse
    } ifelse
  } forall
  pop dist /node load
} bind def
/NearestNode {
  (NearestNode) DebugBegin
  dup xcheck not { nametostr } if /CompB ED
  dup xcheck not {
    nametostr /CompA ED
    /CompB load dup xcheck not {
      /mindist -1 def
      [ exch false GetInternalNodeNames ]
      { @GetCenter ToVec
        CompA NearestNodeTmp
        exch dup mindist ge mindist 0 ge and {
          pop pop
        }{
          /mindist ED /minnodeA ED
        } ifelse
      } forall
      minnodeA
    } {
      CompA NearestNodeTmp exch pop exec
    } ifelse
  } {
    exec
  } ifelse
  DebugEnd
} bind def
/RelConnAngle {
  (RelConnAngle) DebugBegin
  /fiberalign ED
  dup xcheck not { nametostr } if /CompB ED
  dup xcheck not { nametostr } if /CompA ED
  /CompA load xcheck {
    /CompB load xcheck {
      @ABVect exch atan
    } {
      4 copy @ABVect 6 2 roll pop pop 2 copy
      CompB (Center) NodeName @GetCenter
      4 2 roll @ABVect 4 2 roll
      CompB
      fiberalign center eq {
        RelConnAngle@center
      }{
        3 1 roll pop pop
        RelConnAngle@ref
      } ifelse
      2 copy exch atan
      7 3 roll 2 copy 9 -2 roll
      DotProd 0 gt 5 1 roll DotProd 0 gt xor { 180 add } if
    } ifelse
  } {
    4 2 roll pop pop 2 copy
    CompA (Center) NodeName @GetCenter
    4 2 roll @ABVect 4 2 roll
    CompA fiberalign center eq {
      RelConnAngle@center
    }{
      3 1 roll pop pop
      RelConnAngle@tref
    } ifelse
    2 copy exch atan
    5 1 roll DotProd 0 gt { 180 add } if
  } ifelse
  DebugEnd
} bind def
/RelConnAngle@ref {
  dup (A) NodeName exch (B) NodeName
  @GetCenter 3 -1 roll @GetCenter @ABVect
} bind def
/RelConnAngle@tref {
  dup (TrefA) NodeName exch (TrefB) NodeName
  @GetCenter 3 -1 roll @GetCenter @ABVect
} bind def
/RelConnAngle@center {
  (Center) NodeName @GetCenter 4 2 roll @ABVect
} bind def
/GetIfcOrNodeCoord {
  dup xcheck {
    exch pop exec
  } {
    nametostr exch nametostr exch GetIfcCenter
  } ifelse
} bind def
/connectInterfaces {
  /relAngleTmp ED
  PN 2 eq {
    pop @ABVect NormalizeVec 4 2 roll VecAngle /relAngleTmp ED
  } if
  PN 3 ge {
    trans eq {
      @ABVect NormalizeVec 4 2 roll pop pop % remove Vec from stack
      relAngleTmp matrix rotate dtransform
      4 2 roll pop pop
    } {
      @ABVect NormalizeVec 4 2 roll VecAngle /relAngleTmp ED
    } ifelse
  } if
  relAngleTmp
} bind def
/GetCompRange {
  2 copy gt { 1 }{ -1 } ifelse 3 -1 roll
  { exch dup 3 -1 roll inttostr strcat exch} for
  pop
} bind def
/CorrectDipoleIfc {
  (CorrectDipoleIfc) DebugBegin
  dup dup 3 copy
  8 -1 roll dup 9 1 roll NodeName exch 7 -1 roll dup 7 1 roll NodeName
  gsave
    tx@Dict begin
      STV CP T
      exch @GetCenter 3 -1 roll @GetCenter
    end
  grestore
  4 copy @ABDist 1e-7 lt {
    6 -1 roll
    gsave
      tx@Dict begin
        STV CP T
        (TrefA) NodeName @GetCenter 7 -1 roll
        (TrefB) NodeName @GetCenter
      end
    grestore
    @ABVect NormalizeVec 2 copy
    8 -2 roll abs exch abs mymax -1e-6 mul VecScale
    8 -2 roll cvn load begin
      IfcName load begin
        X Y VecAdd /YCorr exch def /XCorr exch def
      end
    end
    4 2 roll abs exch abs mymax 1e-6 mul VecScale
    4 2 roll cvn load begin
      IfcName load begin
        X Y VecAdd /YCorr exch def /XCorr exch def
      end
    end
  } {
    10 { pop } repeat
  } ifelse
  DebugEnd
} bind def
/ClipFadeValue {
  dup 0 lt { pop 0 }{ dup 1 gt { pop 1 } if } ifelse
} bind def
/fadeto@white {
  FadeFunc ClipFadeValue @S mul @H exch @B sethsbcolor
} bind def
/fadeto@black {
  FadeFunc ClipFadeValue @B mul @H exch @S exch sethsbcolor
} bind def
/fadeto@transparency {
  FadeFunc ClipFadeValue @T mul .setopacityalpha
} bind def
/fadefunc@linear {
  neg 1 add
} bind def
/fadefunc@squared {
  dup mul neg 1 add
} bind def
/fadefunc@gauss {
  0.4 div dup mul neg Euler exch exp
} bind def
/fadefunc@exp {
  -6 mul Euler exch exp
} bind def
/FadeStroke {
  /FadeFunc ED /FadeToColor ED /@T ED
  PathLength dup /@L ED exch div /@dl ED
  mark
  { false counttomark 3 roll }
  { true counttomark 3 roll }
  {} {} pathforall
  currenthsbcolor /@B ED /@S ED /@H ED
  newpath /currL 0 def
  counttomark 3 idiv 1 1 3 -1 roll {
    pop
    { % lineto
      /y2 ED /x2 ED  x2 x1 sub y2 y1 sub 2 copy
      dup mul exch dup mul add sqrt dup  @L div exch
      @dl div 1 add floor dup dup
      4 2 roll div 5 1 roll
      1 1 3 -1 roll {
        5 copy 4 copy 2 copy eq not { fadecorrect add } if exch div VecScale
        6 2 roll 1 sub dup 0 eq not { fadecorrect sub } if exch div VecScale
        x1 y1 VecAdd moveto x1 y1 VecAdd lineto
        mul currL add FadeToColor
        stroke
      } for
      4 1 roll pop pop mul currL add /currL ED
      /y1 y2 def /x1 x2 def
    } { % moveto
      /y1 ED /x1 ED
    } ifelse
  } for
  pop
} def
/TransformPath {
  mark [ 3 -1 roll aload pop
  counttomark 1 add counttomark 1 add exch 1 roll
  {
    counttomark 1 eq { cleartomark exit } if
    dup /curvetype eq {
      7 1 roll
      3 { CompMtrx transform CM itransform 7 2 roll } repeat
      counttomark -1 roll dup counttomark 1 roll
      7 roll
    } {
      3 1 roll CompMtrx transform CM itransform 3 -1 roll
      counttomark -1 roll dup counttomark 1 roll
      3 roll
    } ifelse
  } loop
  ]
} bind def
/DeriveCurve {
  (DeriveCurve) DebugBegin
  exch dup length 4 eq not {
    pop pop 0 0
  } {
    aload pop 5 -1 roll
    dup 1 exch sub dup mul -3 mul exch % P0 P1 P2 P3 C0=(-3(1-t)^2) t
    dup dup -4 mul 1 add exch dup mul 3 mul add 3 mul exch % P0 P1 P2 P3 C0 C1=(3(3t^2-4t+1)) t
    dup dup 2 mul exch dup mul -3 mul add 3 mul exch % P0 P1 P2 P3 C0 C1 C2=(3(2t-3t^2)) t
    dup mul 3 mul % P0 P1 P2 P3 C0 C1 C2 C3=3t^2
    8 copy
    0 6 -1 3 { -1 roll 0 get 3 -1 roll mul add } for
    9 1 roll
    0 6 -1 3 { -1 roll 1 get 3 -1 roll mul add } for
  } ifelse
  DebugEnd
} bind def
/GetBezierDeriv {  % t on stack
  10 dict begin % hold all local
  /t ED
  /t1 1 t sub def % t1=1-t
  dup length /BezierOrder exch def
  /Points exch def
  /Coeff tx@FuncDict begin Pascal end BezierOrder get def % get the coefficients
    0 0 % initial values for x y
    BezierOrder -1 0 { % BezierOrder,...,2,1,0
      /I ED % I=BezierOrder,...,2,1,0
      /J BezierOrder I sub def % J=0,1,2,...,BezierOrder
      I 0 eq {
        0
      }{
        I t I 1 sub exp mul t1 J exp mul        %  i*t^{i-1}*(1-t)^{n-i}
      } ifelse
      J 0 eq {
        0
      } {
        J t I exp mul t1 J 1 sub exp mul    % -(n-i)t^i(1-t)^{n-i-1}
      } ifelse
      sub Coeff J get mul
      Points I get aload pop 3 -1 roll VecScale VecAdd
    } for % x y on stack
  end
} bind def
tx@IntersectDict begin
/IntersectLinePath {
  3 dict begin
    PreparePath dup length /n exch def
    2 copy ElongateLine exch 3 -1 roll pop
    /isect [] def
    /t -1 def
    {
      /n n 1 sub def
      2 copy IntersectBeziers
      dup 5 1 roll LoadIntersectionPoints
      dup length 0 gt {
        /isect exch def
        0 get dup type /arraytype eq {
          aload pop add 0.5 mul
        } if n add /t exch def
        exch pop
        exit
      } {
        pop pop pop
      } ifelse
    } forall
    t isect
  end
} bind def
end
/mymax {
  2 copy lt { exch } if pop
} bind def
/debug {
  /@N ED count dup @N gt @N 0 ge and { pop @N } if
  copy @N { == } repeat
} bind def
/debugComp {
  dup (debug comp ") exch strcat ("===============) strcat ==
  cvn load {
    dup type /dicttype eq {
      (plane----------------) ==
      { == == } forall
      (-----------done) ==
      } { == } ifelse
      ==
  } forall
  (================== done) ==
} bind def
end % tx@OptexpDict

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A447D5FBE86D961AE4D4251149F11C4BC269E10B48E8C42DC2484EDE87
6540CB8A5EA2494148D09CC9D5014EB7272F10897FEB361AAC8C7642DA07EFEE
356790B9D0755C63CE287BB6533A5A2B6BAB27E291ABCC443BF097D5FD49B9CB
ACCF7387D6B618E76141EEC43B566C2C8D40E2FB8B9812DDA376AFD07DA6A127
DC81AC7CC79D5484D5FEB9D68F9D154E0E6D9C10C0D5F74695745B5B14649F37
CDBAD5DB780F512C2E1790C0F62C82200E5F245CB75E3CF291ADBC2600D221D9
958484FCDAF56C4F0074103CFA58117204614502D59D2D6AA1475906C91007DC
D9F035A6D2DE39976DA36879EFE35031F340BA6C211667BF29E32EDB93DAA76B
BD21192CB456B6BD178CBD6BF5FFD5E0C92DA1807D2DD318
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
dup 61 /slash put
dup 76 /L put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91051800EE6C54285
AB0594D87D05EB4CB44FFC094DA0072AE7D4BF2F4F9BB812FED256B937BC2574
8C529F97ABB2C66ACC9C920D99131C0161A5BA285A63474FD1F0008249EEB8C1
0ADD8250823959D4546BEB86EBAB2D7D9D260428D8147DB96D3D1C079391E85F
DF629D3B0969055A7D623A68FF778D3EC76F162F6804469C77813000675E2F1A
0F0E9B88678411D8320CA1379B5FBAD3D3C7C1E389103D81EB083AF73853EC0E
DA9C806C498C5066FE3542D6C5DAA215B140015A2B871DAD1FBF77E16D1B0387
84F58BE9D96602BBE9E4BF4D25E18B3334F94C3C751AE4303D8EAE04BFC266E0
47AB0092AE431AD42F84903F937C4FC61861B5B2FFB61768A46F997B3E432EB9
11D99CE5478CBF566FC5BC7C4C8D5B69C16F750F4731AC768E4A77A2F8DE2A40
2572CDFB65ACDD817E848778392259D47C0A6A0E0ABF9E9D179786BC279E7458
B8CC9990506D3C430DB068A25B37EBD2DAC952658AB8898E304B94D36FB7EB0E
0D4C7FC8379F5677A0C27938E0EC876F8EFF376650A58BA99F33798F021BFE0B
44418E540486A08F8C60DE1F72E9F828BBE03209D3A8D53C8C0E5D3160C82A12
D843872E4899CAC54570038AF69D2EB8278A0DF74EADC6DD36A1AC2E8964C6C4
BEF75A5FBB5F71A901007C1F81933FCCFE87EB083FDECF7B0C4334AC6284ACD2
1C7D43EDA50491C97883FA792FDC7322FC26AE006ABCDB2768709A54C8D52D44
9773F4CDB94BEEC1719B2C0E3C71AF498CA0ED1720BA7C17BC15CDFB6E0A6486
D0C30DF3DDB8DA79F076F495A68C8502221B8333D602F48DC3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 65 /A put
dup 66 /B put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6A42FA7AF1CD28488C1FA0A2D5D57551A68A6479A8FFA785C2BD2D32
BB5F20CFCD667AB094E382D582BEAD23DF0A82CC481E2DF2F7B0CE752DB13736
3373816937321F70D50D6D61F24053B2D53F0D9435B8575DDAB8AF9358720367
9A974E13D88C63121A3196210E0C1363B06E0C4CB49A374F2A0C163CE0512B66
7AC78A09A780813B1FF02AA967B12AAFAA0C4E797EF349A0EB76D9524D9345E8
226E83D3291C80B65FD333DD6A1DFD3F3CF2476231B11E3005F3F94074622377
3C8BC72E954983FEDEBF29C468F87096011692AFE293731EE7455CCC4ED0ABEF
6C73B6DAD196A17D4F415D8447ECF70B67DBD46643BBB2D9CA0825E4E1899778
6BA72E91BA1D2759753E96A327B6C55724D80DABC4D736411942BBA8CF08157F
21D63C12E302B2AE8F89259944B1272B1259D760D7B237396DE5E7810D69F242
8045CD609E23CE37791362950FB7414D0A2A7969C4C1E24E272A91C5C70D329E
38BB46FD05F9027EC85A5770A26ABFCE9BB6F317D1927FD9100CAAA63C6A4A24
A808A932650890ADBEF2B23765A431C9C05777C5F9FCE9085CF55CE0548710F8
4BF0C35052FE6AC212A20E02B86BE559E9AB16B32D0DF190AC6CBA784E9865B0
0EE8B41BE0B14DC9DF40BCC3ED44CABEA0204F45E3FDBD7BCB47DE68FF8CC8C4
C1F3C6D54F9300B1A5B26121E7AE3D52C1224A4964E27E64F0AD1B996A5AE550
B1E5EB5E4E068688938379CAB93ABE05747491570EDB80902B818F3F0A35AD11
A2AFFDE3C954FF3FF9CA1CB2D8C5A51C43867A5474AFE4A542C8641D7D957EDD
B999219FB9F36C8D606142E4B244E66A85437E20B97683C69DA60D2533692C35
ECEC6D8523FC5708FBAD793E9D328A9B31C4897D51AF17B9562670633526DA15
4F2FC6BEEA172FCEC9B7C23EE02FD19C327134B56197C411E3E527B13748C9FB
4580135B616405F42758BDD2C8CC2EC6EF07567E07F01202FCB8C4FE4CC3549C
AA17819840977FD82A38D963E012DF0DD89995514E9FB920B59E53117FB961D3
1F12861F7CCF40B861174308A264FB3051B3684E4A333B37D735233093AAFA54
FFA50A3C775B46790D67CC0A092950F693A42136142D77A1741E2895CB2CF6F6
43A645E9F9A7BF98C5632B31D9DE02F304BC19E9771E955A63B46469EB70DB15
E4019BB930F4E1038BAF8691733BF4866B46B20C6B0399298B697621A88DDEB8
C80E29CB40FF0D75129AB458DF0113B9E8EEA35D521340F6113FEDDB8BD432AF
A68303BF163480163422D6F9CC276840CDD2754C30E55B80A94A0F96CC987C08
D22ADDC8B4AAE9F222E7B4D5BF3B1E736992E995B82F518870690C8914721895
C172F0783C51DBE3791453800907EF65D2427E35B8C0D54AB4B6D20E34D7DBD0
2A870111004EC77419B880D0C8D8FD58EC320AAD6CECD064FE6A89AAC4FD02F3
F6970F6306395ECDE4FA81570618237A94F53D33F3DD169A593B3D020683696B
791E16C8193B782893E1631735771F2652947324AFD34CC32A5B7E1DB4B9FDC6
437E97A0EBB4121AF2B5258F04659522BF22518338AF196EAFEDE3FDEEEE2F25
FD19185B3D9C18F3FDA8409ABAB35BB21161A8BFCB04972281DF846645878B98
55956530709EED093CE4625D42160270B21693AA67B0569BC9A5A286FF5A52CE
74702030A3BEE826292D632C6A2A623843DC73594050BE4E8DBAF3D34F4B7856
820C5017D52CC5CA99FF089F19DEEBA90489ADD0914CCDA375D6039F7E33C33B
3E6BBBC51039331DC4E3A2670A47A7C6811EABCD71C9836D9FDF83AE518BDE1A
B5D8F6E73FE44D422F9BA22A2D2F30895813507F900C2AC7BDEF8F392474EA36
681ABCE677B4322782A2D9B21BC2CFB46A86B940C564BFEBFEE1F502A178E3A7
270A91571E49B37CCBB0C4264FB5C09643F0242FD09B87811C890C3C91643A8F
478022765D9FDBB769014EB78756C3ACE142C5FA23C05DD102ED1667C9775758
93D67A11D28A41208CB894A4DBC2709112938ACF9BB26060C6DB82060568C4F8
93F745BEA4D9E21ECCAC20A2E48B37F8B9B5D8C12102C71401F776BE0D1A4402
1737B372183BE0A39E20EDDD93D5AA2762A1676BB6CF6E192135A38EF0C7CD4A
B7CCE0E187F28E5B8919DE85DD6DA9B03D3AF4F479F5C27BAC92012DDF52A1CB
980216CF5F7DAA443A1874263ADF8F29B553822F304A195E7ED06E81503EB9DE
8AAA04DBAC9BB599A95E1F1C0D092C7B21505ECA3C0BD6452F6D144C757AB81F
F22C22F84C48B07516D51C3F871F61F40EBB75EEC0976B88CAED100B1AE113DC
C0CCFCA557352DF610237BB3C6E242E5F468DF9A75ED5B78C49642E51A141C5F
34F7579AAE96243F7D9FD8D8EB4A878F25A58C920D0FFFD6FB6A1CEC6342E998
CBD88DC5D8A8E37D1DFB754845E77AEA64E14417DFC9BFD0A320D5F807DE3563
B3CF370D4B6CAFB8ACF722635C5B69BDD895E3C0D2E88F48603C49DE611929FD
C285476FB125119A2752AA2AD62B2DD0B28DFCBC1B582C30F03FE3BC960E89FF
F22F9EEC3DE6F27D81E5AE06EFE62B59FF553FE749B19ECD08ADB8CB78D82808
D7808004710523E45439376C52CC880D07E42434B2AC455BE179A3A67BEDDAC7
0743F782BC19633A44E889CB71E8686C1AC71279D5327814B63EC8757E5E5A84
CE2187DE59E66CBD701FBE8B11523BF8412D0EEBA2CC4A176B1EE20A0A0709D6
C9E30AC4FB02F9AE77382A1CB0373B54B48A33B73C75C666F9754C8CFCF5CEA4
B1426140D1E906716FF46DAAFF426E0EB71D3A0484A9A7AF430CEEF83D4B8D71
91A767F7FBAF466136460A8ABDC4FB7A6B0BB95D213C923B41D956D6E354CFF3
438ED34339BF2B1ABE89E84CD97BDF576D963FFD837FEC42071444129856C2CB
695A6C0854ED6F94E074ED92B17D73C3C9E58ACE7D1CA5222F8CEF30FCB6C502
F68637788DDF30C7A53F6CA262AF2133A00A362456F41D57B684A061153A631D
123BF32DCB8D688FF88811CB549B7C7665CC45451D1BDE8BC57013BCE4EAE99F
29D64E0FE1301FF0FA39C176CF863968547F95D85901A4F0CD1255D29BA70AD1
7978785C6AFFF4C00C1E197DD410D5F1996E9BB66724EA3F6B940094AD4A2DAA
CA192E31F53D5AF1592EB11EE87946197C71E5B6FC6C95FE47665E60DA667C30
08D1164BC1FCD6B3EFF627203630AF2BD897DB3C7DD9D8CCCC0D1357BE9CAA11
26E0B29CCF37CA44199F8287D7FE8BC6D819708103BB963F6F0BDA611B948CBE
C3CBF438FA558BBEF71C2FE003573A03979A10FE8BD0429DB40474E8CDDA3C64
02606A2EAB04D9FB6D3D713FC2C70DAEEE97F688DDBE781C517389FC8E085ADF
EC2D8FB9397A81FD93494CE42818E5E138B77BBFDD812C1DE1FB421707E38F93
1E28BF1039F4CB6342B3A76391E5063954F4473543B3EDD7864B026D016B0ABF
CA115414EBF02C6C8BC6D7281324FD819D9BB907E92A643F4246325F1C11BFC5
F9CC903EA968DD9F1E3D799EE190807B5C9365E4BE725D263FB838011E0D6C6B
B5C5D2BC92F915E0F0E6D0616CA8E1382A7F713781C1BDD4D2B444E15B445AA4
FD28A5F020913BCD504ECAAA9C69AA29742E0E96B67ECC6B33A5A6DCBC667F8E
8B34A669A11ED316CF1AC2894C850D336E57F065B6E85CE271696457AEEB7A53
7B7A76AA9A068CEB4E69F95FC215CDCAA6037285349E3183C365FFACCCBACF1C
C37300637A2D214528FBE34F282A8F100D3FF500A155A19FE0EB4676E93018FB
BF601A291EDBD3B301E23A6F4BE997137636646C41459F7C0B2B7C60E1D9E29E
923A94E0E42BB0B690F7FC929738DCD0D9272947E90D88DEBB453756842D56C9
07E1D9608194F0B9C06EF0E630DCCC0B4059ADDC71ADEDA97733641B5CA67D79
5DC5FCABB88D4D6AF91C161154E1EEB1837D7AF7913A28CDA443BECB57D1114D
0B64A990368B31AB3110CBEA074B0C6A311B5A438A4CDDD30587687BAA00C70E
9AA9F061D9B23CDBCF604E04A09A4D8FC818F72598B6106E7CE3DA439D6FBCFC
6E0B33591079D9FF4650357ED6AACE787E4BFA797F4D8445848CCDD84FC6DBA2
5D652E6CE9B785E5C7C9EB625B9C6A998AB2B7430907CD17D0D92B4EFC289960
18D5A0D4B8757CE67830110947DEDB6BE65FD857397797B1F5E1DFD637AD6CF8
9D8CB5F02BABA027310BD37D7EFFD0237D83AE09693BAD6A04CD95B0F3895A12
C9D5C60CAA0BD7798050496FE29B050F1CCD8B96824222233EE6F8AFACDC4D68
3911A121B6DE4C992806F2759235E0D7BE3389DD3228905CCA73445729890333
3C250D9A00FC42640B52C8C378CC584D2FAD4D568B8656AEE71958B056020FAA
C80DF39575DF417C17AA4156E853E418140FA22068688439CACCC202D29A9BFC
049D37467F501722A86999BBB12569828D389F745966DD06590FCB0CE4743FE0
65A5248CE9088F63AF975561216C1738BA95AF94FC160ECC7E695B4823134553
7950677C2F1914FE83D7B566700F12162D837F82C7240CD35D902B0E575206EA
A72B6DFC1B227C84C56A8B3C55C5486D6B0646AFBEE8B0F8E38CE19A95561CB5
402746D9D34E2C9A33B69E81D9314178D77E0FDB26671512F48A740808E52CD5
E88E16D755198CEF74F27CD4D98B756948B2DA38ACD9CF2EA5657B65FA61ACFB
0B59BF5A38D33439832ECA6DAE8802F4849C3BC9027618044238ADE729F8D897
F8CC31CCCC8A51AA44DCCAE3055069F5A8F30A9062F50A43881E6599B2B88E66
7E95725B6883638AD011AE4477C7652C76AD5C0DE8A9DF935C7B71BE3F373B81
323A7E861E4D6898707FD853FF07A787FE711AB169B8D7307121EB4953A344BA
A16F664691F0735D7773C2CAF069F93E940A5F676E6E267116C6F86069F71061
6B5C25FE2B3A05E4990772BEE2FEEC0B435D292C7D720ABE226CD44BF831E539
6C4E6ABB49F37EA8E0C3477D330D8A6E6838436514552BE034921CFD59F9BCF2
717C04A6A724BAB3A67ADCC95064FFFAA33BCD687A650972B24256AA4B31DA70
41D9CBEFACBDA6D93A46E2DD2752965189465C7F85D97DC83BE3CDFECDD92A25
6BA8803102AEE72CE7DFFE3F5A6309C447DCEE07104369C4F3E7E188D43C3775
51EC1F75E9DE4B77C6FB9F0158E7335883366ECB29BB35D080173589F845C0A0
8209CB011088C8DB1219BEC2A6139C1EE245D63448D32124DBA54C800B51A54D
DF9F6FEA255C98E175554E2E6BEF5CA41C37E86610A7BB768D3AEC502630C4A4
A4DCB35B6E639BE1C536FBA8F1FDC7C5E9CE8008AED24BCC20FAE32E3D9301FE
25B04F71BB4D9F5BB2C9330D78E17AC7778BFC1C0708650E61E3FA859246A9D0
15872BF4C0BE0FFBEE2B3A3A04AD382606EAC0599F6D1895336B9022CE447D6B
5EB162570C8D0EA6A7E5245EC68B23A618A881C37FCFD21F3A430B466B5F1AAB
886D6FDFB229043C8F9659B53D6389F0CA40F9190261B1F36BAC3357FA65215F
6B06E1D9A4A13DF6D7447ACCA150D05B25727474916370B37F24394FF53B224C
A74D09D1DC836D0E3829A5192BA79DDF40F2BEBB638CDA0B1E0CEBB4907FBFD2
AA338318B7776A9E59369BD61CA7074D95CFB4B4D65CE998721CB58477414ABF
2366B0DFC6EEE45C015A95AC8BB741E1ED16178DC8732B652EBFF72E16A867E3
C172B88BB70F285EC386298FA5F57FAD79188BCE91AFAECF6910E4A26E0CE742
31AC2E2F7738E1A7C2928B9FAAC23FCF5F7F8D033DB54147D31385482F2C6E61
2E23136D8FD78BE2512D1E6471701E98C03630F33F289BC7E609646B5917DEE4
305EA1B5802B875D85BE83104960211086E56979CC00086E7C962E2EA7E530E5
16D87050FB35B5CFF3ECAB77B583760FCFA5AEFF167C3C8812E13335FC2937D8
4E5F32A44D1DD8CF712AD005E4522FA0712B2AC742F979E5C748AAC794FD3B11
BBA5F8D55171E14D9D5F3434A710AFB618030A4379F1217394ACC520025CE3CD
CDA573F36E125D503B02B43A2DC586AD1E160DFDB1A2E4697F64F20D228241E9
04A631AFC767732BC332031393869A3F6C1E9FBCBCD5E7B3E3A4A1A7636F9F9C
E90FD85192F8A84F49157610060FD7477A8138F9BC94FE2BBF448527AA078702
EA0DC9E59C3BC4502EE43E75E2142919AF19DA59D4A2CCE9A57F0232C883C629
546F357D6DDEE2EEAD1F60BD07F4C38B78823028ED29A84FF28A90A856F5441C
690C7DAE976F85B42EF9998BEBC829C1B4C9C17274394080438AB646AE0BBC7D
58A92835845B67F2D53584685C18D51FDA019A5EFADEC8CAA022AB2EBDEF707A
8F9BAA02CC30B5091F672D482493EFC49DF0783BE88836BEDFAE4104FA9FF5AA
7ADE65D251E7A7F65A031FF3B3E3B514749F938C3E005C67AC1E915880D22D90
D1FC4DCFB33352FA7A4719AA86405B55ABC858F3D2C3C9D8C72E516C2E263831
D21835C96D504E2C853C1626DF613966EF6DC497ADFB3AA6B235246CD83982B0
D5EC7426F06B651CA6FB936FE9FA6DF90FC6B629903F53AE4E6AA9680C8F9F07
9E3A324B9E9774CE08180C2A9598677E74E01B02F896BB6F2F07AC96B71B7D93
248BB23BEBA88C5F10EA518A8E4C478E52CE25CE0D276A38C4D6AFE3066506CC
945B32AB53A353B0A60FD401981866081D60AE29D1F25C3EF360EC691F2894BA
9BBCB73AB0C14B3FAA892C9287BBF0A733A04533A449D471BB518B3D674BEE7A
D21FF347267C1A29D167A68BDE8322EA388CEB51E0A0B7D16D29510504B09E00
7C0F7EEB0BD8769DB972F50FEEB8E74EB327D8C1AFB19E6511E160762ECA1D68
81D5BF63CD466A4E9C2EA2ED127FEDDC4387DD15B5089ED4339598F82232E65D
96DFF590DED6289877DF1CE3CE38CCE4B17F086128FB80735339628B2903185F
B460AC250F600555AE7F4277E85B3CEFFF99C99E4B075A7F644CA9BD65CC50E8
95A2848172435D8B3EB5DFF21DEA4B116A09BB7F320F0C6A791D230AA68E340F
0A40F535DBFCB0B57E63DD7984ED20392A3A1BD2E70328542D5B9DD4141BA8B7
D3CF19CFF9EFC714E676109295BCE25A2F3FF69276A743E410C0EA46378F36F5
ACAEAE2059E32051744DBBAA1427DF99135D38C8EF3DA260F8C5F7A75E1FCF69
0386FF773A4264DE91DD935FEE5823B8B8F419C0A852FE9D5661270F4C02D109
794FA31399CBBFB9943CA84B56684FF8843E1286039223E2A4482E208AF3397C
E3A025D50F89173B3BEE11A69092D620299DC210146B87626C8A7C809680F626
7BA2F1D3222A2C06B902CCB5BF890299D7E6FD7F9FD3D2F0F2195BE334876C51
DD1796C277C26513E9EE7B4B46FE9419D47D3DEFC9CBBBE53208B62D829333D6
6D813FD13CC0159AD13E862490C6A68082C5118B2881541B1AF79B4DFFAFA220
72182C0FF214D0026AF3151E7C83E799F42EB47F6A68DBC453811AE367B0028A
8767BDB463FA708DC80D9D349AA8492E8FC3FE8AE8188B26C64EDA10E44112EF
1F15F0C8C8CABE6945A15FEE11A483D1D2E490D147326EA1AE816CD51298D8B4
D357287BA32DE8458AAB955F6B811E3207A662F1E83E7308941C56C4C57EF0DE
189DBBC71E632B4C1B4A30031E07F82C018CF55315DA3537DF6FF3F920D30259
1895CDFFF56D957924C22B46091C5FAEBA5C8ED114DD77A533B5E07D1AD9EAE9
435B2AAD21B4E2D059BD08070AFD14F1D74BCD35E5EBB50436B9709F0FAFB304
BE7E4921A86E82FC2592551160EC827D650FF5AE1D6E26E2F59E0882E6F94288
B4D3073925B79F6BE7CAD2FDBF326D6C92CF43F3560151D3B4438BB4556709B7
5D7B6A327C6E33E90B94CC1A803E0F3685487121FB3EBFE7864BE0E6FDB20436
BB26B784E225B80DC2F5C13700622CBBF8B4C5A5CEDA6EA6B0A602067BA1A5CD
98D2B4B0F19F2C18A45BEE7389D32495F89BCE589E4CE02282D5A715D451F8A1
5AD60844F793E98858AFAFCF22C3AA3B818A518FF0D66D689E4C944632F48792
78B88B0AD74EC75E0B22BCA9F2D07841AE441DF79E0B5AA8FC9928E2BAF37AB9
4716D30D9B4B2FC837C27E73EC4EF59518EB47CD42EE98815649F10742711E30
7D8B2E8F7567796FD8956C8E823E9134E53BFF7672586E49679124AD286D1F5F
D6EC55AA4FEE6429581B4D0F1C2B10BCFCA6047319DAA5D24A26012F5258F6E8
EE9B4E387D1CE0ADC5F41E03850CC8A684AD9C7729100A93AA71FB425E4802FD
E5C4831052D8F326314F0C3C09D4D5F697C75AF684929CDC181250F0D4C7CB17
B516B27D4F5E8E8595D04242E4EBE1356EC92FA9101102BA420C9B81C0BD520A
B392F3A8A1187D4D394408CDD79C88C6460A1BD62A31BEC09526891AEC6F36CA
779877F6481FBC97AF1E3EA1C470CEBAC45DE333B2BF93B55409EEB2F56AA65E
B800DBAD3113124CE4E5FCEEFDBD9F377D834935FC9F98770B49AD33A9598594
E018EF720CC1133245DA064E2F5153458F895DF12040433D09CF2A9642EC3C23
6003A65812303B0BD629CA680EE64E40CFC7F7F2350C620624814D8731F4643D
A7335C3B6F57456E915164FA2B988014AD8745233994BBDACEB5AA6DBC882606
DAF1E5B5C28DEF57C35C55E75879CA505B570DF07F2F6F737FC27F0D1E3E8C5D
F574B77A889CF4E24AA57CBEEDBC77372C2ADF1C85452D1250864D8A7B8F4B91
B3510A2D80CCD18F2B153E29D7937FCD343C649041D46673B499A6C9945835FB
D1E28C8304948E2D556B448131324D83B60F0555829303C157E88E58D685BB49
35809CF1F6FB31A02E1DF1F9A0B4092059D759DF65FF7D35562BDD6D36B29EFC
8CFA55A5AEF987A82BF355ADAC44E6F75718A3819C8B2CA08E67013E625AA6DD
8619D1D4524CC5C4C5FBCCCA68F88E5848E7FBB0AA9451A3125E8554D48FDC71
872064ECF201C5C39FCC33B698152DC089DCA32B1AE2C315F986617ACED52E42
690F98081FC6E4463C122DE98B00B530450309EEEF77C334F405F344AE7A314E
525BA42A83684EE577F03F8D1A7343A4FC47B3B8B1D30E26BC0C15725040E593
D8F8AB39EC31DA9C05E33DBD2D95C82CB80F5B787454B8EB1B503E615EA05F4E
D8FE25D1F4370F600B6F352583C9BC5F020AADABB02F8C7D66DA2FF24F2DD723
D75859EA527B98D5C399CE05FDEDC3762837BC1A657FC8A53F5CDECF6412ABC2
77372C35C01AB89BD83578D6F6C8649DB2FE94DD67441BCB2755
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 33660171 21166827 1000 600 600 (diagrama.dvi)
@start /Fa 205[33 50[{}1 58.1154 /CMR7 rf /Fb 179[57
14[42 39[48 21[{}3 83.022 /CMMI10 rf /Fc 138[46 32 33
33 1[46 42 46 69 23 1[25 23 3[37 46 37 46 42 13[46 2[57
65 1[76 6[54 57 63 1[59 62 14[42 50[{}26 83.022 /CMR10
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop
%%HiResBoundingBox: 0 0 513.61348pt 322.98018pt
 0 TeXcolorgray Black 0 TeXcolorgray
-600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a
%%PageBoundingBox: 0 0 512 322
%%HiResPageBoundingBox: 0 0 511.69337 321.77274
%%BeginPageSetup
<< /PageSize [511.69337 321.77274] >> setpagedevice
0 0 bop
%%EndPageSetup
 0 TeXcolorgray
0 TeXcolorgray -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 56.90549 227.62195 3 -1 roll
add 3 1 roll add exch } false /N@Det 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 56.90549 193.47873 3 -1 roll
add 3 1 roll add exch } false /N@An 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 56.90549 113.81097 3 -1 roll
add 3 1 roll add exch } false /N@BS 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 tx@NodeDict begin tx@NodeDict
/N@BS known { -31.29819 0. /N@BS load 2 GetEdge 0.0 0. AddOffset /N@BS
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
3 -1 roll add 3 1 roll add exch } false /N@Blk 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 tx@NodeDict begin tx@NodeDict
/N@BS known { 85.35823 0. /N@BS load 2 GetEdge 0.0 0. AddOffset /N@BS
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
3 -1 roll add 3 1 roll add exch } false /N@PEM 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 tx@NodeDict begin tx@NodeDict
/N@BS known { 170.71646 0. /N@BS load 2 GetEdge 0.0 0. AddOffset /N@BS
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
3 -1 roll add 3 1 roll add exch } false /N@OutF 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 56.90549 28.45274 3 -1 roll
add 3 1 roll add exch } false /N@Mu 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 455.2439 256.07469 3 -1 roll
add 3 1 roll add exch } false /N@Sup 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 398.33841 219.08603 3 -1
roll add 3 1 roll add exch } false /N@FSup 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 256.07469 184.94283 3 -1
roll add 3 1 roll add exch } false /N@MC 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 270.30106 219.08603 3 -1
roll add 3 1 roll add exch } false /N@M1c 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 270.30106 162.18054 3 -1
roll add 3 1 roll add exch } false /N@M2c 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 364.19519 162.18054 3 -1
roll add 3 1 roll add exch } false /N@M3c 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 364.19519 136.57324 3 -1
roll add 3 1 roll add exch } false /N@InF 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@1A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OutF
known { /N@OutF load GetCenter } { 0 0 } ifelse end } false /N@OE@@1B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@1A @GetCenter /N@OE@@1B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.259800000000000000 0.5 mul
def /@@y 0.3  0.5 mul def end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@1A /N@OE@@1B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@1A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
cos mul add YA tx@OptexpDict begin /N@OE@@1A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 sub angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputA 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@1A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
cos mul add YA tx@OptexpDict begin /N@OE@@1A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 add angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputB 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@1Rotref
known { /N@OE@@1Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x neg end
0  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {0 1} @@y neg @@y trans {PlainIfc} {@@x 0} {0 1}
0 0 trans {PlainIfc} 1  false false false (OE@@1) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@1Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end

-629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { {tx@NodeDict begin tx@NodeDict /N@OE@@1B
known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end } /OE@@1 exch
tx@OptexpDict begin NearestNode end  28.45274 div exch 28.45274 div
exch    28.45274 mul exch 28.45274 mul exch  } false /N@@@A 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { {tx@NodeDict begin tx@NodeDict /N@OE@@1B
known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end } /OE@@1 pop
tx@OptexpDict begin /N@@@A @GetCenter ToVec NearestNode end  28.45274
div exch 28.45274 div exch    28.45274 mul exch 28.45274 mul exch 
} false /N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { /AngleA  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A
load GetCenter } { 0 0 } ifelse end {tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end } /OE@@1
exch relative RelConnAngle 0.  add  end  def /AngleB  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B
load GetCenter } { 0 0 } ifelse end {tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end } /OE@@1
relative RelConnAngle 0.  add end  def 0.67  0.67  GetEdgeA GetEdgeB
xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA ED mul /ArmB
ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA GetArmB xA2 yA2 xA1 yA1
2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0
sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def
/by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay
y3 y0 sub cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul
mul add cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy
t0 mul add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0
add ay t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL
{ getValues 3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u
0 def /du 0.01 def 0 100 { /t0 u def /u u du add def /t u def getdL
add } repeat } def /GetArrowPos { /ende 0.5  1 gt {ArrowPos}{ArrowPos
CurveLength mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0
u def /u u du add def /t u def /sum getdL sum add def sum ende gt {exit}
if } loop u } def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{
1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def /t
GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop pop
pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2
yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos
{ { HPutLines } HPutCurve } def /VPutPos { { VPutLines } HPutCurve
} def   } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore  grestore end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@2A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OutF
known { /N@OutF load GetCenter } { 0 0 } ifelse end } false /N@OE@@2B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin /N@OE@@2A @GetCenter /N@OE@@2B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.1  0.5 mul def /@@y 0.5  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@2A /N@OE@@2B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2A
known { /N@OE@@2A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@2B known { /N@OE@@2B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 2.3 1 sub angle cos mul add YA
2.3 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2A
known { /N@OE@@2A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@2B known { /N@OE@@2B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 2.3 1 add angle cos mul add YA
2.3 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@2Rotref
known { /N@OE@@2Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {0 1} @@x neg @@x trans {PlainIfc} {@@x 0} {0 1}
@@x neg @@x trans {PlainIfc} {0.  -0.5 mul 0} {@@x neg @@y} 0 0 trans
{PlainIfc} {0 @@y neg} {1 0} @@y neg @@y trans {PlainIfc} {0 @@y} {1
0} @@y neg @@y trans {PlainIfc} 3 [1.5]  true true false (OE@@2) {
28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@2Center
@GetCenter 0.0 -17.07181 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629
1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@2) CorrectDipoleIfc
 end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@3A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OutF
known { /N@OutF load GetCenter } { 0 0 } ifelse end } false /N@OE@@3B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@3A @GetCenter /N@OE@@3B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@3A /N@OE@@3B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@3A
known { /N@OE@@3A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@3B known { /N@OE@@3B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.8 1 sub angle cos mul add YA
1.8 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@3A
known { /N@OE@@3A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@3B known { /N@OE@@3B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.8 1 add angle cos mul add YA
1.8 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@3Rotref
known { /N@OE@@3Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@3) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@3Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804
a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@3) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@4A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OutF
known { /N@OutF load GetCenter } { 0 0 } ifelse end } false /N@OE@@4B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@4A @GetCenter /N@OE@@4B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 0.5  0.5 mul def /@@x 0.1  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@4A /N@OE@@4B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4A
known { /N@OE@@4A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@4B known { /N@OE@@4B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.3 1 sub angle cos mul add YA
1.3 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4A
known { /N@OE@@4A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@4B known { /N@OE@@4B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.3 1 add angle cos mul add YA
1.3 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@4Rotref
known { /N@OE@@4Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@4) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@4Center
@GetCenter 0.0 19.91682 35.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@4) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@5A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OutF
known { /N@OutF load GetCenter } { 0 0 } ifelse end } false /N@OE@@5B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@5A @GetCenter /N@OE@@5B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@5A /N@OE@@5B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@5A
known { /N@OE@@5A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@5B known { /N@OE@@5B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.9 1 sub angle cos mul add YA
0.9 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@5A
known { /N@OE@@5A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@5B known { /N@OE@@5B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.9 1 add angle cos mul add YA
0.9 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@5Rotref
known { /N@OE@@5Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@5) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@5Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@5Rotref
@GetCenter 2 copy /N@OE@@5A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@5Rotref
@GetCenter 2 copy /N@OE@@5B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@5) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@6A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@6B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0] def /@yref [1] def /@@ang
0 def  end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@6A @GetCenter /N@OE@@6B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.5  0.5 mul def /@@y 0.5  0.5
mul def  end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@6A /N@OE@@6B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6A
known { /N@OE@@6A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@6B known { /N@OE@@6B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@6A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
cos mul add YA tx@OptexpDict begin /N@OE@@6A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 sub angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputA 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6A
known { /N@OE@@6A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@6B known { /N@OE@@6B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@6A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
cos mul add YA tx@OptexpDict begin /N@OE@@6A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 add angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputB 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@6Rotref
known { /N@OE@@6Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@6) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  @xref 1 1 sub
get @yref 1 1 sub get DefineExtNode end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6Ext1 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OE@@6Ext1
known { /N@OE@@6Ext1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@6Ext
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /N@OE@@6Ext load
/N@ExtNode ED end  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@6Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804
a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@6) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@7A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@7B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@7A @GetCenter /N@OE@@7B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@7A /N@OE@@7B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@7A
known { /N@OE@@7A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@7B known { /N@OE@@7B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.4 1 sub angle cos mul add YA
0.4 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@7A
known { /N@OE@@7A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@7B known { /N@OE@@7B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.4 1 add angle cos mul add YA
0.4 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@7Rotref
known { /N@OE@@7Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@7) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@7Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@7) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@8A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@8B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@8A @GetCenter /N@OE@@8B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@8A /N@OE@@8B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.0 1 sub angle cos mul add YA
1.0 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.0 1 add angle cos mul add YA
1.0 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@8Rotref
known { /N@OE@@8Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@8) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@8Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end

-629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@8) CorrectDipoleIfc
 end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@9A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@9B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@9A @GetCenter /N@OE@@9B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@9A /N@OE@@9B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@9A
known { /N@OE@@9A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@9B known { /N@OE@@9B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.5 1 sub angle cos mul add YA
1.5 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@9A
known { /N@OE@@9A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@9B known { /N@OE@@9B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.5 1 add angle cos mul add YA
1.5 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@9Rotref
known { /N@OE@@9Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@9) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@9Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804
a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@9) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PEM
known { /N@PEM load GetCenter } { 0 0 } ifelse end } false /N@OE@@10A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@10B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@10A @GetCenter /N@OE@@10B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@10A /N@OE@@10B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@10A
known { /N@OE@@10A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@10B known { /N@OE@@10B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2.0 1 sub angle cos mul
add YA 2.0 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@10A
known { /N@OE@@10A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@10B known { /N@OE@@10B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2.0 1 add angle cos mul
add YA 2.0 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@10Rotref
known { /N@OE@@10Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@10) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@10Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@10Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@10Rotref
@GetCenter 2 copy /N@OE@@10A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@10TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@10Rotref
@GetCenter 2 copy /N@OE@@10B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@10TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@10) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@An known { /N@An load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@Blk known { /N@Blk load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@BS known
{ /N@BS load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@11 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@11Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@An
known { /N@An load GetCenter } { 0 0 } ifelse end } false /N@OE@@11A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Blk
known { /N@Blk load GetCenter } { 0 0 } ifelse end } false /N@OE@@11B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@11@A @GetCenter /N@OE@@11@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@11@A /N@OE@@11@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@11Rotref
known { /N@OE@@11Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0 0} {1 0} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc} 1
1  true true false (OE@@11) { 28.45274 mul exch 28.45274 mul exch 
} NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@11Center
@GetCenter 0.0 28.45274 40.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@11Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS known { /N@BS load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS known { /N@BS load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@Blk known
{ /N@Blk load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@12 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Blk
known { /N@Blk load GetCenter } { 0 0 } ifelse end } false /N@OE@@12Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@12A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@12B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@12@A @GetCenter /N@OE@@12@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin 0.15  0.5 mul dup /@@y0 ED /@@y ED
end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@12@A /N@OE@@12@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@12Rotref
known { /N@OE@@12Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@12) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@12Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@12Center
@GetCenter 0.0 11.38092 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@12Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@13A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Mu
known { /N@Mu load GetCenter } { 0 0 } ifelse end } false /N@OE@@13B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@13A @GetCenter /N@OE@@13B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@13A /N@OE@@13B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@13A
known { /N@OE@@13A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@13B known { /N@OE@@13B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2 1 sub angle cos mul add
YA 2 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@13A
known { /N@OE@@13A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@13B known { /N@OE@@13B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2 1 add angle cos mul add
YA 2 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@13Rotref
known { /N@OE@@13Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [1.5]  false
true false (OE@@13) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@13Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@13Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@13Rotref
@GetCenter 2 copy /N@OE@@13A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@13Rotref
@GetCenter 2 copy /N@OE@@13B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@13) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS known { /N@BS load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS known { /N@BS load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@Mu known {
/N@Mu load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@14 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Mu
known { /N@Mu load GetCenter } { 0 0 } ifelse end } false /N@OE@@14Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@14A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS
known { /N@BS load GetCenter } { 0 0 } ifelse end } false /N@OE@@14B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@14@A @GetCenter /N@OE@@14@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@14@A /N@OE@@14@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@14Rotref
known { /N@OE@@14Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0 0} {1 0} @@x neg @@x refl {PlainIfc} 1 false true false (OE@@14)
{ 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@14Center
@GetCenter 0.0 -14.22636 90.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@14Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Det
known { /N@Det load GetCenter } { 0 0 } ifelse end } false /N@OE@@15A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@An
known { /N@An load GetCenter } { 0 0 } ifelse end } false /N@OE@@15B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@15A @GetCenter /N@OE@@15B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.1  0.5 mul def /@@y 0.7  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@15A /N@OE@@15B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@15A
known { /N@OE@@15A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@15B known { /N@OE@@15B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@15A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@15A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@15A
known { /N@OE@@15A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@15B known { /N@OE@@15B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@15A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@15A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@15Rotref
known { /N@OE@@15Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {0 1} @@x neg @@x trans {PlainIfc} {@@x 0} {0 1}
@@x neg @@x trans {PlainIfc} {0.  -0.5 mul 0} {@@x neg @@y} 0 0 trans
{PlainIfc} {0 @@y neg} {1 0} @@y neg @@y trans {PlainIfc} {0 @@y} {1
0} @@y neg @@y trans {PlainIfc} 3 [1.5]  true true false (OE@@15) {
28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@15Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@15Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@15Rotref
@GetCenter 2 copy /N@OE@@15A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end

-629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@15Rotref
@GetCenter 2 copy /N@OE@@15B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@15) CorrectDipoleIfc
 end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Det
known { /N@Det load GetCenter } { 0 0 } ifelse end } false /N@OE@@16A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@An
known { /N@An load GetCenter } { 0 0 } ifelse end } false /N@OE@@16B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@16A @GetCenter /N@OE@@16B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@16A /N@OE@@16B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.9 1 sub angle cos mul
add YA 0.9 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.9 1 add angle cos mul
add YA 0.9 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@16Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@16Rotref
known { /N@OE@@16Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@16Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@16) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@16Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@16Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@16Rotref
@GetCenter 2 copy /N@OE@@16A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@16TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@16Rotref
@GetCenter 2 copy /N@OE@@16B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@16TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@16) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Det
known { /N@Det load GetCenter } { 0 0 } ifelse end } false /N@OE@@17A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@An
known { /N@An load GetCenter } { 0 0 } ifelse end } false /N@OE@@17B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@17A @GetCenter /N@OE@@17B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@17A /N@OE@@17B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@17A
known { /N@OE@@17A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@17B known { /N@OE@@17B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.5 1 sub angle cos mul
add YA 0.5 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@17A
known { /N@OE@@17A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@17B known { /N@OE@@17B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.5 1 add angle cos mul
add YA 0.5 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@17Rotref
known { /N@OE@@17Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [1.5]  false
true false (OE@@17) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@17Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@17Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@17Rotref
@GetCenter 2 copy /N@OE@@17A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@17Rotref
@GetCenter 2 copy /N@OE@@17B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@17) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@An
known { /N@An load GetCenter } { 0 0 } ifelse end } false /N@OE@@18A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Det
known { /N@Det load GetCenter } { 0 0 } ifelse end } false /N@OE@@18B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0] def /@yref [1] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@18A @GetCenter /N@OE@@18B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 0.8  0.5 mul def /@@x 0.8  0.5
mul  def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@18A /N@OE@@18B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@18A
known { /N@OE@@18A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@18B known { /N@OE@@18B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@18A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@18A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@18A
known { /N@OE@@18A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@18B known { /N@OE@@18B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@18A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@18A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@18Rotref
known { /N@OE@@18Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@18) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  @xref 1 1 sub
get @yref 1 1 sub get DefineExtNode end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@18Ext1 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OE@@18Ext1
known { /N@OE@@18Ext1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@18Ext
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /N@OE@@18Ext load
/N@ExtNode ED end  end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@18Center
@GetCenter 0.0 -19.91682 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@18Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@18Rotref
@GetCenter 2 copy /N@OE@@18A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@18Rotref
@GetCenter 2 copy /N@OE@@18B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@18) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {455.2439 170.71646 } false /N@OE@@19A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Sup
known { /N@Sup load GetCenter } { 0 0 } ifelse end } false /N@OE@@19B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@19A @GetCenter /N@OE@@19B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def /@@y 1.7  0.5
mul def  end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@19A /N@OE@@19B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@19A
known { /N@OE@@19A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@19B known { /N@OE@@19B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@19A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@19A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@19A
known { /N@OE@@19A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@19B known { /N@OE@@19B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@19A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@19A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@19Rotref
known { /N@OE@@19Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@19) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@19Center
@GetCenter 0.0 -28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@19Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@19Rotref
@GetCenter 2 copy /N@OE@@19A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@19Rotref
@GetCenter 2 copy /N@OE@@19B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@19) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {284.52744 219.08603 } false /N@OE@@20A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FSup
known { /N@FSup load GetCenter } { 0 0 } ifelse end } false /N@OE@@20B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@20A @GetCenter /N@OE@@20B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.259800000000000000 0.5 mul
def /@@y 0.3  0.5 mul def end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@20A /N@OE@@20B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@20A
known { /N@OE@@20A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@20B known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@20A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@20A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@20A
known { /N@OE@@20A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@20B known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@20A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@20A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@20Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@20Rotref
known { /N@OE@@20Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@20Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x neg end
0  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@201 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {0 1} @@y neg @@y trans {PlainIfc} {@@x 0} {0 1}
0 0 trans {PlainIfc} 1  false false false (OE@@20) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@20Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@20Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@20Rotref
@GetCenter 2 copy /N@OE@@20A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@20TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@20Rotref
@GetCenter 2 copy /N@OE@@20B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@20TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { {tx@NodeDict begin tx@NodeDict /N@OE@@20B
known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end } /OE@@20 exch
tx@OptexpDict begin NearestNode end  28.45274 div exch 28.45274 div
exch    28.45274 mul exch 28.45274 mul exch  } false /N@@@A 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { {tx@NodeDict begin tx@NodeDict /N@OE@@20B
known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end } /OE@@20 pop
tx@OptexpDict begin /N@@@A @GetCenter ToVec NearestNode end  28.45274
div exch 28.45274 div exch    28.45274 mul exch 28.45274 mul exch 
} false /N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { /AngleA  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A
load GetCenter } { 0 0 } ifelse end {tx@NodeDict begin tx@NodeDict
/N@OE@@20B known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end }
/OE@@20 exch relative RelConnAngle 0.  add  end  def /AngleB  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B
load GetCenter } { 0 0 } ifelse end {tx@NodeDict begin tx@NodeDict
/N@OE@@20B known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end }
/OE@@20 relative RelConnAngle 0.  add end  def 0.67  0.67  GetEdgeA
GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA
ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA GetArmB xA2
yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1
yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1
ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub
bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0 3 exp
mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul by t0
t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul mul add
cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub Pyth } def
/CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u u du add
def /t u def getdL add } repeat } def /GetArrowPos { /ende 0.5  1 gt
{ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def /du 0.01 def
/sum 0 def { /t0 u def /u u du add def /t u def /sum getdL sum add
def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt {1.0 1.
1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5  1 gt
{CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {227.62195 184.94283 } false /N@OE@@21A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@MC
known { /N@MC load GetCenter } { 0 0 } ifelse end } false /N@OE@@21B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@21A @GetCenter /N@OE@@21B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /@@x 4.5  0.5 mul def /@@y 3.  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@21A /N@OE@@21B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@21A
known { /N@OE@@21A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@21B known { /N@OE@@21B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@21A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@21A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@21A
known { /N@OE@@21A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@21B known { /N@OE@@21B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@21A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@21A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.3   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@21Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@21Rotref
known { /N@OE@@21Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@21Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@21) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@21Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@21Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804
a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@21Rotref
@GetCenter 2 copy /N@OE@@21A @GetCenter 0.  0.3   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@21TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@21Rotref
@GetCenter 2 copy /N@OE@@21B @GetCenter 0.  0.3   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@21TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@21) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M1c
known { /N@M1c load GetCenter } { 0 0 } ifelse end } false /N@OE@@22A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FSup
known { /N@FSup load GetCenter } { 0 0 } ifelse end } false /N@OE@@22B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@22A @GetCenter /N@OE@@22B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@22A /N@OE@@22B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@22A
known { /N@OE@@22A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@22B known { /N@OE@@22B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 4 1 sub angle cos mul add
YA 4 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@22A
known { /N@OE@@22A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@22B known { /N@OE@@22B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 4 1 add angle cos mul add
YA 4 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@22Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@22Rotref
known { /N@OE@@22Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@22Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {-1e-4 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc} {0
0} {0 1} 0.1  -0.5 mul dup neg trans {PlainIfc} {1e-4 0} {0 1} @@y0
@@y sub @@y0 @@y add trans {PlainIfc} [1.5]  false true false (OE@@22)
{ 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@22Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@22Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@22Rotref
@GetCenter 2 copy /N@OE@@22A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@22TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@22Rotref
@GetCenter 2 copy /N@OE@@22B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@22TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@22) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M3c
known { /N@M3c load GetCenter } { 0 0 } ifelse end } false /N@OE@@23A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@InF
known { /N@InF load GetCenter } { 0 0 } ifelse end } false /N@OE@@23B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@23A @GetCenter /N@OE@@23B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@23A /N@OE@@23B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.4 1 sub angle cos mul
add YA 0.4 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.4 1 add angle cos mul
add YA 0.4 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@23Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@23Rotref
known { /N@OE@@23Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@23Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {-1e-4 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc} {0
0} {0 1} 0.1  -0.5 mul dup neg trans {PlainIfc} {1e-4 0} {0 1} @@y0
@@y sub @@y0 @@y add trans {PlainIfc} [1.5]  false true false (OE@@23)
{ 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@23Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@23Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@23Rotref
@GetCenter 2 copy /N@OE@@23A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@23TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@23Rotref
@GetCenter 2 copy /N@OE@@23B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@23TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@23) CorrectDipoleIfc
 end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M3c
known { /N@M3c load GetCenter } { 0 0 } ifelse end } false /N@OE@@24A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@InF
known { /N@InF load GetCenter } { 0 0 } ifelse end } false /N@OE@@24B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /N@OE@@24A @GetCenter /N@OE@@24B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.259800000000000000 0.5 mul
def /@@y 0.3  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@24A /N@OE@@24B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@24A
known { /N@OE@@24A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@24B known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@24A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@24A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@24A
known { /N@OE@@24A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@24B known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@24A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@24A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@24Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@24Rotref
known { /N@OE@@24Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@24Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x neg end
0  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@241 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {0 1} @@y neg @@y trans {PlainIfc} {@@x 0} {0 1}
0 0 trans {PlainIfc} 1  false false false (OE@@24) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@24Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@24Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@24Rotref
@GetCenter 2 copy /N@OE@@24A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@24TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@24Rotref
@GetCenter 2 copy /N@OE@@24B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@24TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { {tx@NodeDict begin tx@NodeDict /N@OE@@24B
known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end } /OE@@24 exch
tx@OptexpDict begin NearestNode end  28.45274 div exch 28.45274 div
exch    28.45274 mul exch 28.45274 mul exch  } false /N@@@A 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { {tx@NodeDict begin tx@NodeDict /N@OE@@24B
known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end } /OE@@24 pop
tx@OptexpDict begin /N@@@A @GetCenter ToVec NearestNode end  28.45274
div exch 28.45274 div exch    28.45274 mul exch 28.45274 mul exch 
} false /N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { /AngleA  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A
load GetCenter } { 0 0 } ifelse end {tx@NodeDict begin tx@NodeDict
/N@OE@@24B known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end }
/OE@@24 exch relative RelConnAngle 0.  add  end  def /AngleB  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B
load GetCenter } { 0 0 } ifelse end {tx@NodeDict begin tx@NodeDict
/N@OE@@24B known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end }
/OE@@24 relative RelConnAngle 0.  add end  def 0.67  0.67  GetEdgeA
GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1 roll mul /ArmA
ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA GetArmB xA2
yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end xB2 yB2 xB1
yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1
ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub
bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0 3 exp
mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul by t0
t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul mul add
cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub Pyth } def
/CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u u du add
def /t u def getdL add } repeat } def /GetArrowPos { /ende 0.5  1 gt
{ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def /du 0.01 def
/sum 0 def { /t0 u def /u u du add def /t u def /sum getdL sum add
def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt {1.0 1.
1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5  1 gt
{CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -629 1804 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 0.9 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@@) 12 12 GetCompRange  (OE@@) 1 1 GetCompRange
  counttomark 0 eq not { dup cvn load dup /source known { /source get
{ def } forall }{ pop } ifelse } if beamalign firstcomp eq { dup dup
(Center) NodeName tx@NodeDict exch known not { pop /beamalign relative
def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/pop load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll add 3 1
roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch } if
} ifelse currentdict /beamwidth known { beamwidth currentdict /beamwidth
undef } { mark 0.1 counttomark 0 eq { 0 } if exch pop } ifelse 0.5
mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec 5 1 roll
sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1 roll 4
2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam { gsave
0.6 1 0.6  setrgbcolor  1. .setopacityalpha  fill  grestore } def /strokeBeam
true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp /lastVecTmpLow
/lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict /N@OE@@BeamLow0
known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints 1 ge and and
{ /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow ED /N@OE@@BeamUp0
@GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam currentdict /lastVecLow0
known and currentdict /lastVecUp0 known and { /lastVecTmpLow /lastVecLow0
load def /lastVecTmpUp /lastVecUp0 load def } if TraceAndFillWideBeam
grestore pop counttomark 0 gt strokeBeam and { counttomark dup /cnta
ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta cnta 3 sub def /cntb cntb
3 sub def cntb 3 roll /cntb cntb 3 sub def } repeat counttomark 2 idiv
1 add mark exch 1 roll gsave /Lineto /lineto load def 20 dict begin
DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def /arrowminlength 0.2 28.45274
mul def /arrowmaxlength -1 28.45274 mul def /arrowpos 0.5  def /arrowno
1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart 0.5  def counttomark
3 idiv /N exch def () length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple
} ifelse } if cleartomark end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare counttomark
3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength -1 28.45274
mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart 0. 
def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def () length
0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 0.9 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst true def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@@) 16 18 GetCompRange  (OE@@) 11 11 GetCompRange
  counttomark 0 eq not { dup cvn load dup /source known { /source get
{ def } forall }{ pop } ifelse } if beamalign firstcomp eq { dup dup
(Center) NodeName tx@NodeDict exch known not { pop /beamalign relative
def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/pop load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll add 3 1
roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch } if
} ifelse currentdict /beamwidth known { beamwidth currentdict /beamwidth
undef } { mark 0.1 counttomark 0 eq { 0 } if exch pop } ifelse 0.5
mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec 5 1 roll
sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1 roll 4
2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam { gsave
0.6 1 0.6  setrgbcolor  1. .setopacityalpha  fill  grestore } def /strokeBeam
true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp /lastVecTmpLow
/lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict /N@OE@@BeamLow0
known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints 1 ge and and
{ /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow ED /N@OE@@BeamUp0
@GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam currentdict /lastVecLow0
known and currentdict /lastVecUp0 known and { /lastVecTmpLow /lastVecLow0
load def /lastVecTmpUp /lastVecUp0 load def } if TraceAndFillWideBeam
grestore pop counttomark 0 gt strokeBeam and { counttomark dup /cnta
ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta cnta 3 sub def /cntb cntb
3 sub def cntb 3 roll /cntb cntb 3 sub def } repeat counttomark 2 idiv
1 add mark exch 1 roll gsave /Lineto /lineto load def 20 dict begin
DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def /arrowminlength 0.2 28.45274
mul def /arrowmaxlength -1 28.45274 mul def /arrowpos 0.5  def /arrowno
1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart 0.5  def counttomark
3 idiv /N exch def () length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple
} ifelse } if cleartomark end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare counttomark
3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength -1 28.45274
mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart 0. 
def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def () length
0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 0.9 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 0 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@@) 13 14 GetCompRange  (OE@@) 11 11 GetCompRange
  counttomark 0 eq not { dup cvn load dup /source known { /source get
{ def } forall }{ pop } ifelse } if beamalign firstcomp eq { dup dup
(Center) NodeName tx@NodeDict exch known not { pop /beamalign relative
def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/pop load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll add 3 1
roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch } if
} ifelse currentdict /beamwidth known { beamwidth currentdict /beamwidth
undef } { mark 0.1 counttomark 0 eq { 0 } if exch pop } ifelse 0.5
mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec 5 1 roll
sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1 roll 4
2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam { gsave
0.6 1 0.6  setrgbcolor  1. .setopacityalpha  fill  grestore } def /strokeBeam
true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp /lastVecTmpLow
/lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict /N@OE@@BeamLow0
known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints 1 ge and and
{ /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow ED /N@OE@@BeamUp0
@GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam currentdict /lastVecLow0
known and currentdict /lastVecUp0 known and { /lastVecTmpLow /lastVecLow0
load def /lastVecTmpUp /lastVecUp0 load def } if TraceAndFillWideBeam
grestore pop counttomark 0 gt strokeBeam and { counttomark dup /cnta
ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta cnta 3 sub def /cntb cntb
3 sub def cntb 3 roll /cntb cntb 3 sub def } repeat counttomark 2 idiv
1 add mark exch 1 roll gsave /Lineto /lineto load def 20 dict begin
DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def /arrowminlength 0.2 28.45274
mul def /arrowmaxlength -1 28.45274 mul def /arrowpos 0.5  def /arrowno
1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart 0.5  def counttomark
3 idiv /N exch def () length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple
} ifelse } if cleartomark end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare counttomark
3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength -1 28.45274
mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart 0. 
def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def () length
0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow0 lastBeamPointTmpUp /N@OE@@BeamUp0 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow0 /prevVecUp0
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow0 lastVecTmpLow
/lastVecUp0 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 0.9 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 0 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@@) 23 24 GetCompRange   counttomark 0 eq
not { dup cvn load dup /source known { /source get { def } forall }{
pop } ifelse } if beamalign firstcomp eq { dup dup (Center) NodeName
tx@NodeDict exch known not { pop /beamalign relative def } { RelConnAngle@tref
exch atan /beamangle exch def /beamalign absolute def } ifelse } if
 {/nbeam {[n] cvx exec} bind def /Warning /pop load def } beamangle
dup beamdiv 0.5 mul dup 4 -1 roll add 3 1 roll sub  [  counttomark
dup 0 eq { pop 0 0 } { 1 eq { 0 exch } if } ifelse currentdict /beamwidth
known { beamwidth currentdict /beamwidth undef } { mark 0.1 counttomark
0 eq { 0 } if exch pop } ifelse 0.5 mul 3 copy add  28.45274 mul exch
28.45274 mul exch   ToVec 5 1 roll sub  28.45274 mul exch 28.45274
mul exch  ] cvx   exch 4 -1 roll 4 2 roll exch  counttomark mark exch
2 add 1 roll gsave /fillBeam { gsave 0.6 1 0.6  setrgbcolor  1. .setopacityalpha
 fill  grestore } def /strokeBeam true false or def [/lastBeamPointTmpLow
/lastBeamPointTmpUp /lastVecTmpLow /lastVecTmpUp] {currentdict exch
undef} forall tx@NodeDict /N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0
known loadbeampoints 1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec
/lastBeamPointTmpLow ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp
ED } if loadbeam currentdict /lastVecLow0 known and currentdict /lastVecUp0
known and { /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0
load def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 0.9 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 0.9 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow0 lastBeamPointTmpUp /N@OE@@BeamUp0 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow0 /prevVecUp0
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow0 lastVecTmpLow
/lastVecUp0 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { /OE@@1  /OE@@24 exch tx@OptexpDict
begin NearestNode end  28.45274 div exch 28.45274 div exch    28.45274
mul exch 28.45274 mul exch  } false /N@@@A 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { /OE@@1  /OE@@24 pop tx@OptexpDict
begin /N@@@A @GetCenter ToVec NearestNode end  28.45274 div exch 28.45274
div exch    28.45274 mul exch 28.45274 mul exch  } false /N@@@B 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { /AngleA  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A
load GetCenter } { 0 0 } ifelse end /OE@@1  /OE@@24 exch relative RelConnAngle
0.  add  end  def /AngleB  tx@OptexpDict begin tx@NodeDict begin tx@NodeDict
/N@@@A known { /N@@@A load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter } { 0 0 } ifelse
end /OE@@1  /OE@@24 relative RelConnAngle 0.  add end  def 0.67  0.67
 GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1 roll
mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA GetArmB
xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict begin ArrowA end xB2 yB2
xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED
/x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub
3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub
bx sub def /ay y3 y0 sub cy sub by sub def /getValues { ax t0 3 exp
mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp mul by t0
t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t mul mul add
cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub Pyth } def
/CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u u du add
def /t u def getdL add } repeat } def /GetArrowPos { /ende 0.5  1 gt
{ArrowPos}{ArrowPos CurveLength mul} ifelse def /u 0 def /du 0.01 def
/sum 0 def { /t0 u def /u u du add def /t u def /sum getdL sum add
def sum ende gt {exit} if } loop u } def /dArrowPos 1. 1 gt {1.0 1.
1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo 0.5  1 gt
{CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi { /ArrowPos
ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95 mul def getValues
ArrowInside pop pop pop pop } repeat x1 y1 x2 y2 x3 y3 curveto /LPutVar
[ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def /LPutPos { t LPutVar BezierMidpoint
} def /HPutPos { { HPutLines } HPutCurve } def /VPutPos { { VPutLines
} HPutCurve } def   } if end  gsave 0.8 SLW 0 0 1  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore  grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { /OE@@20  /OE@@19 exch tx@OptexpDict
begin NearestNode end  28.45274 div exch 28.45274 div exch    28.45274
mul exch 28.45274 mul exch  } false /N@@@A 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { /OE@@20  /OE@@19 pop tx@OptexpDict
begin /N@@@A @GetCenter ToVec NearestNode end  28.45274 div exch 28.45274
div exch    28.45274 mul exch 28.45274 mul exch  } false /N@@@B 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { /AngleA  tx@OptexpDict
begin tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@@@A known { /N@@@A
load GetCenter } { 0 0 } ifelse end /OE@@20  /OE@@19 exch relative
RelConnAngle 0.  add  end  def /AngleB  tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@@@A known { /N@@@A load GetCenter } { 0 0 } ifelse
end tx@NodeDict begin tx@NodeDict /N@@@B known { /N@@@B load GetCenter
} { 0 0 } ifelse end /OE@@20  /OE@@19 relative RelConnAngle 0.  add
end  def 0.67  0.67  GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth
2 div dup 3 -1 roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB
0 def GetArmA GetArmB xA2 yA2 xA1 yA1 2 copy /y0 ED /x0 ED tx@Dict
begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict begin ArrowB end /y3 ED /x3
ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub
3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub
def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def
/getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0
add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t
3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp mul by
t t mul mul add cy t mul add y0 add } def /getdL { getValues 3 -1 roll
sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0
100 { /t0 u def /u u du add def /t u def getdL add } repeat } def /GetArrowPos
{ /ende 0.5  1 gt {ArrowPos}{ArrowPos CurveLength mul} ifelse def /u
0 def /du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def
/sum getdL sum add def sum ende gt {exit} if } loop u } def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def /ArrowPos 0.  def /loopNo
0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo cvi {
/ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t 0.95
mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2 y2
x3 y3 curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ] cvx def
/LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines }
HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def   } if end
 gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore  grestore end
 -629
1804 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 0 1 0  setcmykcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 0 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@@) 22 22 GetCompRange  (OE@@) 20 20 GetCompRange
  counttomark 0 eq not { dup cvn load dup /source known { /source get
{ def } forall }{ pop } ifelse } if beamalign firstcomp eq { dup dup
(Center) NodeName tx@NodeDict exch known not { pop /beamalign relative
def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/pop load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll add 3 1
roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch } if
} ifelse currentdict /beamwidth known { beamwidth currentdict /beamwidth
undef } { mark 0.1 counttomark 0 eq { 0 } if exch pop } ifelse 0.5
mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec 5 1 roll
sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1 roll 4
2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam { gsave
0 0 0.4 0  setcmykcolor  1. .setopacityalpha  fill  grestore } def
/strokeBeam true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp
/lastVecTmpLow /lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict
/N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints
1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow
ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam
currentdict /lastVecLow0 known and currentdict /lastVecUp0 known and
{ /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0 load
def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 0 1 0  setcmykcolor  1. .setopacityalpha   1  setlinejoin 0 
setlinecap stroke  grestore gsave /Lineto /lineto load def 20 dict
begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4
 mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength 0.2
28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos 0.5
 def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart 0.5
 def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 0 1 0  setcmykcolor  1. .setopacityalpha   1  setlinejoin 0 
setlinecap stroke  grestore } { pop } ifelse currentdict /fillBeam
known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow0 lastBeamPointTmpUp /N@OE@@BeamUp0 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow0 /prevVecUp0
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow0 lastVecTmpLow
/lastVecUp0 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial -629 1804
a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.259800000000000000 0.5 mul
def /@@y 0.3  0.5 mul def end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@1A /N@OE@@1B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@1A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
cos mul add YA tx@OptexpDict begin /N@OE@@1A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 sub angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputA 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@1A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
cos mul add YA tx@OptexpDict begin /N@OE@@1A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@1B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 add angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputB 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@1Rotref
known { /N@OE@@1Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [  tx@OptexpDict begin @@x
neg CLW 28.45274 2 mul div add @@y end  28.45274 mul exch 28.45274
mul exch   tx@OptexpDict begin @@x 0 end  28.45274 mul exch 28.45274
mul exch   tx@OptexpDict begin @@x neg CLW 28.45274 2 mul div add @@y
neg end  28.45274 mul exch 28.45274 mul exch   /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@1Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.1  0.5 mul def /@@y 0.5  0.5
mul def  end  end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@2A /N@OE@@2B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2A
known { /N@OE@@2A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@2B known { /N@OE@@2B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 2.3 1 sub angle cos mul add YA
2.3 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2A
known { /N@OE@@2A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@2B known { /N@OE@@2B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 2.3 1 add angle cos mul add YA
2.3 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@2Rotref
known { /N@OE@@2Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y neg end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y end  28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  tx@OptexpDict begin @@x @@y neg end  28.45274 mul exch
28.45274 mul exch   tx@OptexpDict begin @@x neg @@y end  28.45274 mul
exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@2Center
@GetCenter 0.0 -17.07181 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2Label known {
/N@OE@@2Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -748
1833 a Fc(P)n(ol)-629 1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end

-629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@3A /N@OE@@3B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@3A
known { /N@OE@@3A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@3B known { /N@OE@@3B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.8 1 sub angle cos mul add YA
1.8 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@3A
known { /N@OE@@3A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@3B known { /N@OE@@3B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.8 1 add angle cos mul add YA
1.8 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@3Rotref
known { /N@OE@@3Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.56 SLW 0  setgray    /DS 1.68 0. CLW
mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56 SLW 0  setgray   0.0 0.0 2 copy moveto 3.41418
0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.56 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@3Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629
1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 0.5  0.5 mul def /@@x 0.1  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@4A /N@OE@@4B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4A
known { /N@OE@@4A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@4B known { /N@OE@@4B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.3 1 sub angle cos mul add YA
1.3 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4A
known { /N@OE@@4A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@4B known { /N@OE@@4B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.3 1 add angle cos mul add YA
1.3 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@4Rotref
known { /N@OE@@4Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.1  0.5 mul neg
0.5  0.5 mul neg  28.45274 mul exch 28.45274 mul exch   0.1  0.5 mul
0.5  0.5 mul   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  0.1  0.5 mul 0.5  0.5 mul neg  28.45274 mul exch 28.45274
mul exch   0.1  0.5 mul neg 0.5  0.5 mul   28.45274 mul exch 28.45274
mul exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@4Center
@GetCenter 0.0 19.91682 35.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end


@endspecial -629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4Label known {
/N@OE@@4Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -761 1824 a Fb(\025=)p
Fc(2)-629 1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a
-629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@5A /N@OE@@5B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@5A
known { /N@OE@@5A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@5B known { /N@OE@@5B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.9 1 sub angle cos mul add YA
0.9 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@5A
known { /N@OE@@5A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@5B known { /N@OE@@5B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.9 1 add angle cos mul add YA
0.9 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@5Rotref
known { /N@OE@@5Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 0.8  0.8  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { BeginArrow 0.8  0.8  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56 SLW 0 
setgray  /ArrowA { BeginArrow 0.8  0.8  scale  false 0.4 1.4 1.5 2.
CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1.
.setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 moveto } def /ArrowB { BeginArrow 0.8  0.8  scale  false 0.4 1.4 1.5
2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def  [  0 0.6  0.5 mul   28.45274 mul exch
28.45274 mul exch   0 0.6  0.5 mul neg  28.45274 mul exch 28.45274
mul exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave
0.56 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.56 SLW 0  setgray    /DS 1.68 0. CLW
mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56 SLW 0  setgray   0.0 0.0 2 copy moveto 3.41418
0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.56 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@5Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end


@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.5  0.5 mul def /@@y 0.5  0.5
mul def  end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@6A /N@OE@@6B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6A
known { /N@OE@@6A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@6B known { /N@OE@@6B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@6A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
cos mul add YA tx@OptexpDict begin /N@OE@@6A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 sub angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputA 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6A
known { /N@OE@@6A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@6B known { /N@OE@@6B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@6A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
cos mul add YA tx@OptexpDict begin /N@OE@@6A @GetCenter  28.45274 div
exch 28.45274 div exch  /N@OE@@6B @GetCenter  28.45274 div exch 28.45274
div exch  @ABDist @@x0 @@x add add  end 1 add angle sin mul add   28.45274
mul exch 28.45274 mul exch  } false /N@temp@nlputB 10 {InitPnode }
/NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@6Rotref
known { /N@OE@@6Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.5  0.5 mul neg
0.5  0.5 mul neg  28.45274 mul exch 28.45274 mul exch   0.5  0.5 mul
0.5  0.5 mul   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0.5  0.5 mul 4 div 3 mul neg 0.5 
0.5 mul 0.2 add  28.45274 mul exch 28.45274 mul exch   0.5  0.5 mul
4 div 3 mul neg 0.5  0.5 mul   28.45274 mul exch 28.45274 mul exch
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    0.5  0.5 mul 4 div 3 mul
neg 0.5  0.5 mul 0.2 add  28.45274 mul exch 28.45274 mul exch  2 copy
moveto 1.13791 0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 1  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0.5  0.5 mul 4 div 3 mul neg 0.5 
0.5 mul neg 0.2 sub  28.45274 mul exch 28.45274 mul exch   0.5  0.5
mul 4 div 3 mul neg 0.5  0.5 mul neg  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0.5  0.5 mul 4 div 3 mul neg 0.15
add 0.5  0.5 mul neg 0.2 sub  28.45274 mul exch 28.45274 mul exch 
 0.5  0.5 mul 4 div 3 mul neg 0.15 sub 0.5  0.5 mul neg 0.2 sub  28.45274
mul exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0. 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0. 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [  0 -0.25
 tx@OptexpDict begin sign end neg 0.5  0.5 mul mul -0.25  sub  28.45274
mul exch 28.45274 mul exch   0 -0.25  tx@OptexpDict begin sign end
0.5  0.5 mul mul  28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.56 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  2.0  2.0 ] -2 0 add  DashLine  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@6Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629
1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end


@endspecial -629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6Label known {
/N@OE@@6Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -818 1832 a Fc(PEM)-629
1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@7A /N@OE@@7B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@7A
known { /N@OE@@7A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@7B known { /N@OE@@7B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.4 1 sub angle cos mul add YA
0.4 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@7A
known { /N@OE@@7A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@7B known { /N@OE@@7B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 0.4 1 add angle cos mul add YA
0.4 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@7Rotref
known { /N@OE@@7Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629
1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 0.8  0.8  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { BeginArrow 0.8  0.8  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56 SLW 0 
setgray  /ArrowA { BeginArrow 0.8  0.8  scale  false 0.4 1.4 1.5 2.
CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1.
.setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 moveto } def /ArrowB { BeginArrow 0.8  0.8  scale  false 0.4 1.4 1.5
2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def  [  0 0.6  0.5 mul   28.45274 mul exch
28.45274 mul exch   0 0.6  0.5 mul neg  28.45274 mul exch 28.45274
mul exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave
0.56 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@7Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end

-629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@8A /N@OE@@8B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.0 1 sub angle cos mul add YA
1.0 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.0 1 add angle cos mul add YA
1.0 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@8Rotref
known { /N@OE@@8Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 0.8  0.8  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside { } def
 0.56 SLW 0  setgray  /ArrowA { BeginArrow 0.8  0.8  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  moveto } def /ArrowB { } def /ArrowInside { } def   0.0
0.0 /yOrig ED /xOrig ED  0.6  0.5 mul 2 div 0.6  0.5 mul   28.45274
mul exch 28.45274 mul exch  /ry ED /rx ED /angleA /d { add } def 20.
cvi 90 mod 0 eq { 20. } { rx ry  28.45274 div exch 28.45274 div exch
 exch 20. tan mul exch atan 20. 180 div .5 add floor 180 mul sub }
ifelse 0.0 2 div ArcAdjust def /angleB /d { sub } def -20. cvi 90 mod
0 eq { -20. } { rx ry  28.45274 div exch 28.45274 div exch  exch -20.
tan mul exch atan -20. 180 div .5 add floor 180 mul sub } ifelse 0.0
2 div ArcAdjust def 0 0 1 angleA { ArrowA CP } { add } EllipticArcArrow
angleB /mtrx CM def xOrig yOrig T rx ry scale 0 0 moveto exch dup dup
cos exch sin moveto exch arc mtrx setmatrix gsave 0.56 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@8Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@9A /N@OE@@9B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@9A
known { /N@OE@@9A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@9B known { /N@OE@@9B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.5 1 sub angle cos mul add YA
1.5 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@9A
known { /N@OE@@9A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@9B known { /N@OE@@9B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA 1.5 1 add angle cos mul add YA
1.5 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch 
} false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@9Rotref
known { /N@OE@@9Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.56 SLW 0  setgray    /DS 1.68 0. CLW
mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56 SLW 0  setgray   0.0 0.0 2 copy moveto 3.41418
0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.56 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@9Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@10A /N@OE@@10B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@10A
known { /N@OE@@10A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@10B known { /N@OE@@10B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2.0 1 sub angle cos mul
add YA 2.0 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@10A
known { /N@OE@@10A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@10B known { /N@OE@@10B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2.0 1 add angle cos mul
add YA 2.0 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@10Rotref
known { /N@OE@@10Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.8  0.8  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 0.8  0.8
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def   0.0 0.0 /yOrig
ED /xOrig ED  0.6  0.5 mul 2 div 0.6  0.5 mul   28.45274 mul exch 28.45274
mul exch  /ry ED /rx ED /angleA /d { add } def 20. cvi 90 mod 0 eq
{ 20. } { rx ry  28.45274 div exch 28.45274 div exch  exch 20. tan
mul exch atan 20. 180 div .5 add floor 180 mul sub } ifelse 0.0 2 div
ArcAdjust def /angleB /d { sub } def -20. cvi 90 mod 0 eq { -20. }
{ rx ry  28.45274 div exch 28.45274 div exch  exch -20. tan mul exch
atan -20. 180 div .5 add floor 180 mul sub } ifelse 0.0 2 div ArcAdjust
def 0 0 1 angleA angleB { ArrowB } { sub } EllipticArcArrow /mtrx CM
def xOrig yOrig T rx ry scale 0 0 moveto exch dup dup cos exch sin
moveto exch arc mtrx setmatrix gsave 0.56 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@10Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@10Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end


@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@11@A /N@OE@@11@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@11Rotref
known { /N@OE@@11Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0.8  2.0 div 2 sqrt mul 0  28.45274
mul exch 28.45274 mul exch   0.8  2.0 div neg 2 sqrt mul 0  28.45274
mul exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@11Center
@GetCenter 0.0 28.45274 40.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@11Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@11Label known
{ /N@OE@@11Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -734 1832 a Fc(BS)-629
1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin 0.15  0.5 mul dup /@@y0 ED /@@y ED
end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@12@A /N@OE@@12@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@12Rotref
known { /N@OE@@12Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 0  setgray  1. .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@12Center
@GetCenter 0.0 11.38092 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@12Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@13A /N@OE@@13B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@13A
known { /N@OE@@13A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@13B known { /N@OE@@13B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2 1 sub angle cos mul add
YA 2 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@13A
known { /N@OE@@13A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@13B known { /N@OE@@13B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 2 1 add angle cos mul add
YA 2 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@13Rotref
known { /N@OE@@13Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@13Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@13Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@13Label known
{ /N@OE@@13Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -770 1824 a Fc(Ob)5 b(j)-629
1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@14@A /N@OE@@14@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@14Rotref
known { /N@OE@@14Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true -8.5359 0.0 8.5359
5.69046 0 Frame  gsave 0.75  setgray  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   2.84544 11.38092 2 copy
moveto 2.84544 0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.82532 13.40103 4.83691 9.38945  
/Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8 SLW 0
 setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.82532 9.38945 4.83691 13.40103  
/Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8 SLW 0
 setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   -4.26773 11.38092 2 copy
moveto 2.84544 0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   -4.26773 11.38092 2 copy
moveto 1.13791 0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -629 1804 a
tx@Dict begin { 0.0 17.07181 } PutCoor PutBegin  end
 -629
1804 a -29 w Fc(B)-629 1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@14Center
@GetCenter 0.0 -14.22636 90.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@14Label 10 {InitPnode } /NodeScale {} def
NewNode end  end

-629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@14Label known
{ /N@OE@@14Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -928 1832 a Fc(Muestra)-629
1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804
a
tx@Dict begin tx@OptexpDict begin /@@x 0.1  0.5 mul def /@@y 0.7  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@15A /N@OE@@15B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@15A
known { /N@OE@@15A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@15B known { /N@OE@@15B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@15A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@15A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@15A
known { /N@OE@@15A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@15B known { /N@OE@@15B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@15A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@15A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@15B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@15Rotref
known { /N@OE@@15Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y neg end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y end  28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  tx@OptexpDict begin @@x @@y neg end  28.45274 mul exch
28.45274 mul exch   tx@OptexpDict begin @@x neg @@y end  28.45274 mul
exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@15Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@15Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629
1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@15Label known
{ /N@OE@@15Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -738 1832 a Fc(An)-629 1804 y
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@16A /N@OE@@16B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.9 1 sub angle cos mul
add YA 0.9 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.9 1 add angle cos mul
add YA 0.9 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@16Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@16Rotref
known { /N@OE@@16Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.56 SLW 0  setgray    /DS 1.68 0. CLW
mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  0.0 0.0 Dot end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56 SLW 0  setgray   0.0 0.0 2 copy moveto 3.41418
0 CLW mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.56 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@16Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@16Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -629 1804 a -629
1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@17A /N@OE@@17B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@17A
known { /N@OE@@17A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@17B known { /N@OE@@17B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.5 1 sub angle cos mul
add YA 0.5 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@17A
known { /N@OE@@17A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@17B known { /N@OE@@17B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.5 1 add angle cos mul
add YA 0.5 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@17Rotref
known { /N@OE@@17Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@17Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@17Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@17Label known
{ /N@OE@@17Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -723 1826 a Fb(L)-666 1838 y
Fa(2)-629 1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a
-629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 0.8  0.5 mul def /@@x 0.8  0.5
mul  def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@18A /N@OE@@18B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@18A
known { /N@OE@@18A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@18B known { /N@OE@@18B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@18A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@18A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@18A
known { /N@OE@@18A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@18B known { /N@OE@@18B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@18A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@18A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@18B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@18Rotref
known { /N@OE@@18Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [  0.8  0.5 mul 0.2 mul 0.8
 0.5 mul 0.4 mul  28.45274 mul exch 28.45274 mul exch   0.8  0.5 mul
0.6 mul 0.8  0.5 mul -0.4 mul  28.45274 mul exch 28.45274 mul exch
  0.8  0.5 mul -0.2 mul 0.8  0.5 mul -0.4 mul  28.45274 mul exch 28.45274
mul exch   /Lineto /lineto load def 0  setlinejoin false NArray n 2
eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0.8  0.5 mul 0.6 mul 0.8  0.5 mul
0.4 mul CLW 28.45274 2 mul div add  28.45274 mul exch 28.45274 mul
exch   0.8  0.5 mul -0.2 mul 0.8  0.5 mul 0.4 mul CLW 28.45274 2 mul
div add  28.45274 mul exch 28.45274 mul exch    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.8  0.8  scale  false 0. 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 0.8  0.8
 scale  false 0. 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [  0.8  0.5
mul -0.3 mul 0.8  0.5 mul 0.15 mul  28.45274 mul exch 28.45274 mul
exch   0.8  0.5 mul -0.8 mul 0.8  0.5 mul 0.3 mul  28.45274 mul exch
28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.8  0.8  scale  false 0. 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 0.8  0.8
 scale  false 0. 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [  0.8  0.5
mul -0.3 mul 0.8  0.5 mul -0.15 mul  28.45274 mul exch 28.45274 mul
exch   0.8  0.5 mul -0.8 mul 0  28.45274 mul exch 28.45274 mul exch
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@18Center
@GetCenter 0.0 -19.91682 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@18Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@18Label known
{ /N@OE@@18Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -762 1832 a Fc(Det)-629 1804
y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def /@@y 1.7  0.5
mul def  end  end
 -629
1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@19A /N@OE@@19B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@19A
known { /N@OE@@19A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@19B known { /N@OE@@19B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@19A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@19A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@19A
known { /N@OE@@19A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@19B known { /N@OE@@19B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@19A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@19A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@19B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@19Rotref
known { /N@OE@@19Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@19Center
@GetCenter 0.0 -28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@19Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@19Label known
{ /N@OE@@19Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -629 1804 a -1419 1824 a Fc(F)-7 b(uen)n(te)28
b(Sup)r(ercon)n(tin)n(ua)-629 1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.259800000000000000 0.5 mul
def /@@y 0.3  0.5 mul def end  end
 -629 1804 a -629 1804
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@20A /N@OE@@20B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@20A
known { /N@OE@@20A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@20B known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@20A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@20A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@20A
known { /N@OE@@20A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@20B known { /N@OE@@20B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@20A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@20A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@20B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@20Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@20Rotref
known { /N@OE@@20Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629
1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [  tx@OptexpDict begin @@x
neg CLW 28.45274 2 mul div add @@y end  28.45274 mul exch 28.45274
mul exch   tx@OptexpDict begin @@x 0 end  28.45274 mul exch 28.45274
mul exch   tx@OptexpDict begin @@x neg CLW 28.45274 2 mul div add @@y
neg end  28.45274 mul exch 28.45274 mul exch   /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@20Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@20Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end

-629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 4.5  0.5 mul def /@@y 3.  0.5
mul def  end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@21A /N@OE@@21B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@21A
known { /N@OE@@21A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@21B known { /N@OE@@21B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@21A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@21A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@21A
known { /N@OE@@21A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@21B known { /N@OE@@21B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@21A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@21A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@21B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.3   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@21Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@21Rotref
known { /N@OE@@21Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@21Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@21Label 10 {InitPnode } /NodeScale {} def NewNode end
 end

-629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@21TrefA /N@OE@@21TrefB  /b ED /a ED
/NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED /NodeSepA ED /OffsetB
ED /OffsetA ED tx@NodeDict a known tx@NodeDict b known and dup { /NodeA
a load def /NodeB b load def NodeA GetCenter NodeB GetCenter 4 copy
exch 4 -1 roll 2 copy gt { pop pop pop pop /yB ED /xB ED /yA ED /xA
ED } { eq 3 1 roll lt and { /yB ED /xB ED /yA ED /xA ED} { /yA ED /xA
ED /yB ED /xB ED} ifelse } ifelse } if  { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end   grestore end

-629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -629 1804
a -629 1804 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@21Label known
{ 0.0 0. /N@OE@@21Label load 0 GetEdge 0.0 0. AddOffset /N@OE@@21Label
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
} PutCoor PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin { 0.0 0.0 0.0 0.0 0.  Uput UUput } PutCoor PutBegin 
end
 -629 1804 a -629
1804 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 -629 1804 a -904 1833 a Fc(Mono)r(cromador)-629
1804 y
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804
a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@22A /N@OE@@22B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@22A
known { /N@OE@@22A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@22B known { /N@OE@@22B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 4 1 sub angle cos mul add
YA 4 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@22A
known { /N@OE@@22A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@22B known { /N@OE@@22B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 4 1 add angle cos mul add
YA 4 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804
a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@22Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@22Rotref
known { /N@OE@@22Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0  setgray  [  0.1 0.1  dup neg 1.  add
2 div add 2 div  28.45274 mul exch 28.45274 mul exch   0.1 1.  2 div
 28.45274 mul exch 28.45274 mul exch   0 1.  2 div  28.45274 mul exch
28.45274 mul exch   0 0.1  2 div  28.45274 mul exch 28.45274 mul exch
  /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0  setgray
 1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0  setgray  [  0.1 0.1  dup neg 1.  add
2 div add -2 div  28.45274 mul exch 28.45274 mul exch   0.1 1.  -2
div  28.45274 mul exch 28.45274 mul exch   0 1.  -2 div  28.45274 mul
exch 28.45274 mul exch   0 0.1  -2 div  28.45274 mul exch 28.45274
mul exch   /Lineto /lineto load def 0  setlinejoin false NArray n 2
eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0  setgray
 1. .setopacityalpha  fill  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@22Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@22Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629
1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629 1804
a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629
1804 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@23A /N@OE@@23B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.4 1 sub angle cos mul
add YA 0.4 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA 0.4 1 add angle cos mul
add YA 0.4 1 add angle sin mul add   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629
1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@23Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@23Rotref
known { /N@OE@@23Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0  setgray  [  0.1 0.1  dup neg 1.  add
2 div add 2 div  28.45274 mul exch 28.45274 mul exch   0.1 1.  2 div
 28.45274 mul exch 28.45274 mul exch   0 1.  2 div  28.45274 mul exch
28.45274 mul exch   0 0.1  2 div  28.45274 mul exch 28.45274 mul exch
  /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0  setgray
 1. .setopacityalpha  fill  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0  setgray  [  0.1 0.1  dup neg 1.  add
2 div add -2 div  28.45274 mul exch 28.45274 mul exch   0.1 1.  -2
div  28.45274 mul exch 28.45274 mul exch   0 1.  -2 div  28.45274 mul
exch 28.45274 mul exch   0 0.1  -2 div  28.45274 mul exch 28.45274
mul exch   /Lineto /lineto load def 0  setlinejoin false NArray n 2
eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0  setgray
 1. .setopacityalpha  fill  grestore end
 
@endspecial -629
1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@23Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@23Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804
a
tx@Dict begin  PutEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629
1804 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -629 1804
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -629 1804 a -629 1804 a
tx@Dict begin tx@OptexpDict begin /@@x 0.259800000000000000 0.5 mul
def /@@y 0.3  0.5 mul def end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@24A /N@OE@@24B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629
1804 a -629 1804 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@24A
known { /N@OE@@24A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@24B known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@24A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@24A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804
a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@24A
known { /N@OE@@24A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@24B known { /N@OE@@24B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@24A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@24A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@24B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629
1804 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -629 1804 a -629 1804
a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin NAngle  RotBegin  end
 -629 1804 a -629 1804 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -629
1804 a -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@24Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -629 1804 a -629 1804 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@24Rotref
known { /N@OE@@24Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [  tx@OptexpDict begin @@x
neg CLW 28.45274 2 mul div add @@y end  28.45274 mul exch 28.45274
mul exch   tx@OptexpDict begin @@x 0 end  28.45274 mul exch 28.45274
mul exch   tx@OptexpDict begin @@x neg CLW 28.45274 2 mul div add @@y
neg end  28.45274 mul exch 28.45274 mul exch   /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -629 1804 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@24Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@24Label 10 {InitPnode } /NodeScale {} def
NewNode end  end

-629 1804 a -629 1804 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -629 1804 a -629 1804 a
tx@Dict begin  PutEnd  end
 -629
1804 a -629 1804 a
tx@Dict begin RotEnd  end
 -629 1804 a -629 1804 a
tx@Dict begin PutEnd  end
 -629 1804
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath  false false end count /ocount exch def
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial
@setspecial
 tx@Dict begin STP newpath  false false end count /ocount exch def
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial
@setspecial
 tx@Dict begin STP newpath  false false end count /ocount exch def
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial
@setspecial
 tx@Dict begin STP newpath  false false end count /ocount exch def
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a @beginspecial
@setspecial
 tx@Dict begin STP newpath  false false end count /ocount exch def
 
@endspecial -629 1804 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -629 1804 a 3623
2040 a
tx@Dict begin tx@OptexpDict begin /lastBeamPointUp1 /lastBeamPointLow1
/lastBeamPoint1 3 { currentdict exch undef } repeat /N@OE@@Beam1 /N@OE@@BeamUp1
/N@OE@@BeamLow1 3 { tx@NodeDict exch undef } repeat  end  end
 3623 2040 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
